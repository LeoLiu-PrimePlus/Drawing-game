{"version":3,"sources":["components/CardHeader/index.js","components/SvgCircle/index.js","components/CountDown/index.js","store/selectors.js","components/Winner/index.js","store/actionTypes.js","store/actions.js","components/DrawingView/index.js","components/DrawingList/index.js","components/CardContent/index.js","components/common/ScrollButton/index.js","components/common/Notify/index.js","App.js","reportWebVitals.js","store/reducers/drawingLists.js","store/reducers/notifyMsg.js","store/reducers/index.js","store/store.js","index.js"],"names":["CardHeader","className","SvgCircle","done","max","radius","stroke","strokeWidth","children","size","length","Math","ceil","PI","remainingLength","width","height","viewBox","xmlns","r","cx","cy","strokeDasharray","strokeDashoffset","strokeLinecap","fill","defaultProps","CountDown","handleSelectMode","useState","countDownType","setCountDownType","counter","setCounter","counterMax","setMax","useEffect","timer","setInterval","clearInterval","handleCountDownType","type","maxLength","value","onChange","e","target","newCounter","parseInt","isNaN","onKeyDown","key","handleInputEnter","onClick","selectDrawingLists","state","drawingLists","selectNotifyMsg","notifyMsg","Winner","useSelector","floor","random","name","ADD_DRAWING_LIST","GENERATE_NAME_LISTS","DELETE_DRAWING_LIST","DELETE_ALL_DRAWING_LISTS","NOTIFY_MESSAGE","notifyMessage","notify","payload","DrawingView","dispatch","useDispatch","step","setStep","msg","id","SwitchTransition","mode","CSSTransition","addEndListener","node","addEventListener","classNames","DrawingList","setName","deleteDrawingLists","setDeleteDrawingLists","toggleLists","setToggleLists","handleAddList","duplicateName","some","item","addDrawingList","handleDeleteList","lists","handleDeleteAllLists","handleGengerateNameList","newDrawingLists","Array","map","randGenerateName","nameLists","numNameParts","randName","nameData","firstNameParts","forEach","newNamePart","test","otherNamePartsNonVowel","otherNamePartsVowel","handleInputChange","placeholder","aria-label","aria-describedby","list","checked","deleteLists","handleCheckBoxChange","CardContent","ScrollButton","processScroll","dimenY","__processScroll","distanceLeft","distanceCovered","stepSize","setTimeout","window","scrollTo","data-target-id","targetId","dataset","scrollDistance","document","getElementById","getBoundingClientRect","top","Notify","closeNotify","clearTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","listId","combineReducers","action","filter","indexOf","createStore","rootReducer","ReactDOM","render","store"],"mappings":"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","file":"static/js/main.60c6c81e.chunk.js","sourcesContent":["import './style.scss'\r\n\r\nconst CardHeader = () => {\r\n    return (\r\n        <div className=\"cardHeader flex-center text-white bg-primary\">Lucky Draw</div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardHeader;","import './style.scss'\r\n\r\nconst SvgCircle = ({ className, done, max, radius, stroke, strokeWidth, children }) => {\r\n    const size = (radius + strokeWidth) * 2\r\n    const length = Math.ceil(2 * radius * Math.PI)\r\n    let remainingLength = 0\r\n    if (max !== 0) {\r\n        remainingLength = length - (Math.ceil(2 * radius * Math.PI) * (done / max))\r\n    }\r\n    \r\n    return (\r\n        <div className=\"svgContainer\">\r\n            <svg \r\n                className={className}\r\n                width={size}\r\n                height={size}\r\n                viewBox={`0 0 ${size} ${size}`}\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n                <g>\r\n                    <circle \r\n                        className=\"circle\"\r\n                        r={radius}\r\n                        cx={radius + strokeWidth} \r\n                        cy={radius + strokeWidth} \r\n                        stroke={stroke}\r\n                        strokeDasharray={length}\r\n                        strokeDashoffset={remainingLength}\r\n                        strokeLinecap=\"round\"\r\n                        strokeWidth={strokeWidth}\r\n                        fill=\"none\" \r\n                    />\r\n                    <circle \r\n                        className=\"circle--bg\"\r\n                        r={radius} \r\n                        cx={radius + strokeWidth}\r\n                        cy={radius + strokeWidth} \r\n                        stroke=\"rgba(0, 0, 0, .1)\"\r\n                        strokeLinecap=\"round\"\r\n                        strokeWidth={strokeWidth} \r\n                        fill=\"none\" \r\n                    />\r\n                </g>\r\n            </svg>\r\n            <div className=\"textContent fs-1\">{children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSvgCircle.defaultProps = {\r\n    done: 0,\r\n    max: 24,\r\n    radius: 100,\r\n    stroke: '#ff4759',\r\n    strokeWidth: 8,\r\n  }\r\n\r\nexport default SvgCircle;","import './style.scss';\r\nimport { useState, useEffect } from 'react';\r\nimport SvgCircle from '../SvgCircle';\r\n\r\nconst CountDown = ({handleSelectMode}) => {\r\n    const [countDownType, setCountDownType] = useState('set')\r\n    const [counter, setCounter] = useState(0);\r\n    const [counterMax, setMax] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const timer = countDownType === 'start' && counter >= 0 && setInterval(() => {\r\n            if (counter > 0) {\r\n                setCounter(counter - 1)\r\n            } else {\r\n                handleSelectMode('drawing');\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(timer);\r\n    }, [counter, countDownType, handleSelectMode]);\r\n\r\n    useEffect(() => {\r\n        if (countDownType === 'set') {\r\n            setMax(0)\r\n        } else if (countDownType === 'start') {\r\n            if (counterMax === 0) {\r\n                setMax(counter)\r\n            }\r\n        }\r\n    }, [counter, countDownType, counterMax])\r\n\r\n    const handleInputCounter = (e) => {\r\n        const target = e.target.value;\r\n        const newCounter = parseInt(target);\r\n        if (!isNaN(newCounter)) setCounter(newCounter);\r\n    }\r\n    \r\n    const handleCountDownType = (type) => {\r\n        if (type !== countDownType) {\r\n            setCountDownType(type)\r\n            if (type === 'set') setCounter(0)\r\n        };\r\n    }\r\n\r\n    const handleInputEnter = (type, e) => {\r\n        if (e.key === 'Enter') handleCountDownType(type)\r\n    }\r\n\r\n    return (\r\n        <div className=\"countDown flex-center\">\r\n            <div className=\"countDown-panel\">\r\n                {\r\n                    countDownType === 'set' ? (\r\n                        <div className=\"countDown-panel-clock mb-3\">\r\n                            <SvgCircle>\r\n                                <input className=\"countDown-panel-input\" maxLength=\"3\" type=\"text\" value={counter} onChange={handleInputCounter} onKeyDown={e => handleInputEnter('start', e)} />\r\n                            </SvgCircle>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"countDown-panel-clock mb-3\">\r\n                            <SvgCircle max={counterMax} done={counter}>{counter}</SvgCircle>\r\n                        </div>\r\n                    )\r\n                }\r\n                <div className=\"d-flex justify-content-between mb-3\">\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('start')}>Start</button>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('stop')}>Stop</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex justify-content-between mb-3\">\r\n                    <div className=\"mb-2\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('set')}>Reset</button>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Back</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CountDown;","export const selectDrawingLists = (state) => state.drawingLists.drawingLists;\r\nexport const selectNotifyMsg = (state) => state.notifyMsg;\r\n","import './style.scss'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDrawingLists } from '../../store/selectors';\r\n\r\nconst Winner = ({ handleSelectMode }) => {\r\n    const drawingLists = useSelector(selectDrawingLists);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"flex-center mb-4\">\r\n                {\r\n                    drawingLists.length > 0 ? (\r\n                        <div>\r\n                            Congratulation for the drawing game winner!!<br/>\r\n                            <div className=\"flex-center text-success fs-3\">\r\n                                {drawingLists[Math.floor(Math.random() * drawingLists.length)].name}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                    :\r\n                    \"There's no drawing lists, please add one at least.\"\r\n                }\r\n            </div>\r\n            <div className=\"flex-center\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Play again~!</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Winner;","export const ADD_DRAWING_LIST = 'ADD_DRAWING_LIST';\r\nexport const GENERATE_NAME_LISTS = 'GENERATE_NAME_LISTS';\r\nexport const DELETE_DRAWING_LIST = 'DELETE_DRAWING_LIST';\r\nexport const DELETE_ALL_DRAWING_LISTS = 'DELETE_ALL_DRAWING_LISTS';\r\nexport const NOTIFY_MESSAGE = 'NOTIFY_MESSAGE';","import {\r\n    ADD_DRAWING_LIST,\r\n    GENERATE_NAME_LISTS,\r\n    DELETE_DRAWING_LIST,\r\n    DELETE_ALL_DRAWING_LISTS,\r\n    NOTIFY_MESSAGE\r\n} from './actionTypes';\r\n\r\nexport const addDrawingList = (name) => {\r\n    return {\r\n        type: ADD_DRAWING_LIST,\r\n        payload: { name }\r\n    }\r\n}\r\n\r\nexport const generateNameLists = (nameLists) => {\r\n    return {\r\n        type: GENERATE_NAME_LISTS,\r\n        payload: { nameLists  }\r\n    }\r\n}\r\n\r\nexport const deleteDrawingList = (lists) => {\r\n    return {\r\n        type: DELETE_DRAWING_LIST,\r\n        payload: { lists }\r\n    }\r\n}\r\n\r\nexport const deleteAllDrawingLists = () => {\r\n    return {\r\n        type: DELETE_ALL_DRAWING_LISTS\r\n    }\r\n}\r\n\r\nexport const notifyMessage = (notify) => {\r\n    return {\r\n        type: NOTIFY_MESSAGE,\r\n        payload: { notify }\r\n    }\r\n}\r\n","import './style.scss';\r\nimport { useState } from 'react';\r\nimport CountDown from '../CountDown';\r\nimport { SwitchTransition, CSSTransition } from \"react-transition-group\";\r\nimport Winner from '../Winner'\r\nimport { selectDrawingLists } from '../../store/selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { notifyMessage } from '../../store/actions';\r\n\r\nconst DrawingView = ({ className }) => {\r\n    const drawingLists = useSelector(selectDrawingLists);\r\n    const dispatch = useDispatch();\r\n    const [step, setStep] = useState('init');\r\n\r\n    const handleSelectMode = (type) => {\r\n        if (type !== step) {\r\n            if ((type === 'drawing' || type === 'countDown') && drawingLists.length === 0) {\r\n                const notifyObj = {\r\n                    msg: \"There's no drawing lists, please add one at least.\",\r\n                    type: \"error\"\r\n                }\r\n                dispatch(notifyMessage(notifyObj))\r\n            } else {\r\n                setStep(type)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div  id=\"targetId\" className={`${className} drawingView flex-center`}>\r\n            <SwitchTransition mode={'out-in'}>\r\n                <CSSTransition\r\n                    key={step}\r\n                    addEndListener={(node, done) => {\r\n                    node.addEventListener(\"transitionend\", done, false);\r\n                    }}\r\n                    classNames=\"fade\"\r\n                >\r\n                    {\r\n                        step === 'init' ? (\r\n                            <div className=\"drawingView-panel flex-center\">\r\n                                {\r\n                                    step === 'init' ? (\r\n                                        <div>\r\n                                            <div className=\"mb-4\">\r\n                                                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('drawing')}>Start without set countdown</button>\r\n                                            </div>\r\n                                            <div>\r\n                                                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('countDown')}>Start set countdown</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    ) :\r\n                                    step === 'countDown' && <CountDown handleSelectMode={handleSelectMode}  />\r\n                                }\r\n                            </div> \r\n                        ) : step === 'countDown' ? (\r\n                            <div className=\"drawingView-panel flex-center\">\r\n                                <CountDown handleSelectMode={handleSelectMode} />\r\n                            </div> \r\n                        ) : <Winner handleSelectMode={handleSelectMode} />\r\n                    }\r\n                </CSSTransition>\r\n            </SwitchTransition>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DrawingView;","import './style.scss';\r\nimport nameData from '../../data/name.json'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectDrawingLists } from '../../store/selectors';\r\nimport { addDrawingList, generateNameLists, deleteDrawingList, deleteAllDrawingLists, notifyMessage } from '../../store/actions';\r\nimport { useState } from 'react';\r\n\r\nconst DrawingList = ({ className }) => {\r\n    const drawingLists = useSelector(selectDrawingLists);\r\n    const dispatch = useDispatch();\r\n    const [name , setName] = useState('');\r\n    const [deleteDrawingLists, setDeleteDrawingLists] = useState([]);\r\n    const [toggleLists, setToggleLists] = useState(false);\r\n\r\n    const handleInputChange = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleInputEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setName(e.target.value);\r\n            handleAddList();\r\n        }\r\n    }\r\n\r\n    const handleCheckBoxChange = (e, id) => {\r\n        if (e.target.checked) {\r\n            const deleteLists = [...deleteDrawingLists, id];\r\n            setDeleteDrawingLists(deleteLists);\r\n        }\r\n    }\r\n\r\n    const handleAddList = () => {\r\n        const duplicateName = drawingLists.some(item => {\r\n            return item.name === name\r\n        })\r\n        if (!duplicateName && name !== '') {\r\n            dispatch(addDrawingList(name));\r\n            setName('');\r\n        } else if (duplicateName) {\r\n            const notifyObj = {\r\n                msg: 'Duplicate Name',\r\n                type: 'error'\r\n            }\r\n            dispatch(notifyMessage(notifyObj));\r\n        } else if (name === '') {\r\n            const notifyObj = {\r\n                msg: 'Should add a name',\r\n                type: 'error'\r\n            }\r\n            dispatch(notifyMessage(notifyObj));\r\n        }\r\n    }\r\n\r\n    const handleDeleteList = () => {\r\n        dispatch(deleteDrawingList(deleteDrawingLists));\r\n    }\r\n\r\n    const handleDeleteAllLists = () => {\r\n        dispatch(deleteAllDrawingLists());\r\n    }\r\n\r\n    const handleGengerateNameList = () => {\r\n        const newDrawingLists = [...Array(20)].map(() => randGenerateName())\r\n        dispatch(generateNameLists(newDrawingLists))\r\n    }\r\n\r\n    const randGenerateName = () => {\r\n        const numNameParts = Math.floor(Math.random() * 4) + 1;\r\n        let randName = nameData.firstNameParts[Math.floor(Math.random() * nameData.firstNameParts.length)];\r\n        [...Array(numNameParts)].forEach(name => {\r\n            let newNamePart = '';\r\n            if (/[^aeiou]/.test(randName[randName.length - 1])) {\r\n                newNamePart = nameData.otherNamePartsNonVowel[Math.floor(Math.random() * nameData.otherNamePartsNonVowel.length)];\r\n            } else {\r\n                newNamePart = nameData.otherNamePartsVowel[Math.floor(Math.random() * nameData.otherNamePartsVowel.length)];\r\n            }\r\n            randName += newNamePart\r\n        })\r\n        return randName\r\n    }\r\n\r\n    const handleToggleLists =() => {\r\n        setToggleLists(!toggleLists)\r\n    }\r\n\r\n    return (\r\n        <div className={`${className} drawingList`}>\r\n            \r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleGengerateNameList()}>Generate new lists</button>\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteList()}>Delete selected list</button>\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteAllLists()}>Delete all drawing list</button>\r\n            </div>\r\n            <div className=\"input-group-sm mb-3 d-flex\">\r\n                <input type=\"text\" className=\"w-50 form-control\" value={name} onChange={(e) => handleInputChange(e)} onKeyDown={e => handleInputEnter(e)} placeholder=\"Add list\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\"/>\r\n                <button className=\"btn btn-outline-secondary btn-sm\" type=\"button\" id=\"button-addon2\" onClick={() => handleAddList()}>Add list</button>\r\n            </div>\r\n            <div className={`drawingList-lists list-group border-m shadow ${toggleLists ? 'drawingList-lists-hide' : ''}`}>\r\n                <div className=\"drawingList-lists-toggle text-white\" onClick={() => handleToggleLists()}>Toggle lists</div>\r\n                {\r\n                    drawingLists.length > 0 ? (\r\n                        drawingLists.map(list => (\r\n                            <label className=\"list-group-item rounded-0\" key={list.id}>\r\n                                <input className=\"form-check-input me-1\" type=\"checkbox\" onChange={(e) => handleCheckBoxChange(e, list.id)} value=\"\" />\r\n                                { list.name }\r\n                            </label>\r\n                        ))\r\n                    ) : <div className=\"p-2\">There's no drawing lists, please add one at least.</div>\r\n                    \r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DrawingList;","import './style.scss';\r\nimport DrawingView from '../DrawingView';\r\nimport DrawingList from '../DrawingList';\r\n\r\nconst CardContent = () => {\r\n\r\n    return (\r\n        <div className=\"cardContent bg-white row\">\r\n            <DrawingList className={'col-lg-4'} />\r\n            <DrawingView className={'col-12 col-lg-8'} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardContent;","import './style.scss';\r\n\r\n\r\nconst ScrollButton = () => {\r\n    const handleScroll = (e) => {\r\n        const targetId = e.target.dataset.targetId;\r\n        if(targetId) {\r\n          const targetElement = document.getElementById(targetId);\r\n          const scrollDistance = targetElement.getBoundingClientRect().top;\r\n          processScroll(scrollDistance);\r\n        }\r\n      }\r\n      \r\n      const processScroll = (dimenY) => {\r\n        __processScroll(dimenY, 0, 1);\r\n      }\r\n\r\n      const __processScroll = (distanceLeft, distanceCovered, stepSize) => {\r\n        setTimeout(() => {\r\n          if(distanceLeft > distanceCovered) {\r\n            stepSize = 1.1*stepSize;\r\n          } else {\r\n            stepSize = Math.ceil(0.91*stepSize);\r\n          }\r\n          window.scrollTo(0, distanceCovered);\r\n          if(distanceLeft > 0) {\r\n            __processScroll(distanceLeft - stepSize, distanceCovered + stepSize, stepSize);\r\n          }\r\n        }, 10);\r\n      }\r\n\r\n    return (\r\n        <div className=\"scrollButton bg-primary text-white fs-6\" data-target-id=\"targetId\" onClick={handleScroll}>\r\n            bottom\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ScrollButton;","import './style.scss'\r\nimport { selectNotifyMsg } from '../../../store/selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { notifyMessage } from '../../../store/actions';\r\nimport { useEffect } from 'react';\r\n\r\nconst Notify = () => {\r\n    const notifyMsg = useSelector(selectNotifyMsg);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const closeNotify = setTimeout(() => {\r\n            const notifyObj = {\r\n                msg: '',\r\n                type: ''\r\n            }\r\n            dispatch(notifyMessage(notifyObj))\r\n        }, 3000)\r\n        return () => {\r\n            clearTimeout(closeNotify)\r\n        }\r\n    }, [dispatch])\r\n    \r\n    return (\r\n        <div className={`notify text-white fs-6 border-m ${notifyMsg.type === 'error' ? 'bg-danger' : 'bg-success'} ${notifyMsg.msg !== '' ? 'notify-show notify-slide' : '' }`}>\r\n            {notifyMsg.msg}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Notify;","import './App.scss';\nimport CardHeader from './components/CardHeader';\nimport CardContent from './components/CardContent';\nimport ScrollButton from './components/common/ScrollButton';\nimport Notify from './components/common/Notify';\n\n\nconst App = () => {\n  return (\n    <div className=\"main container\">\n      <div className=\"card col-12 border-l shadow p-0\">\n        <CardHeader />\n        <h4 className=\"tipTitle\">Please add drawinglists before you start this game</h4>\n        <CardContent />\n      </div>\n      <ScrollButton />\n      <Notify />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_DRAWING_LIST, GENERATE_NAME_LISTS, DELETE_DRAWING_LIST, DELETE_ALL_DRAWING_LISTS } from '../actionTypes';\r\n\r\nconst initialState = {\r\n    drawingLists: []\r\n}\r\n\r\nlet listId = 0\r\n\r\nexport default function drawingListsReducer (state = initialState, action) {\r\n    const payload = action.payload;\r\n    switch (action.type) {\r\n        case ADD_DRAWING_LIST: {\r\n            return {\r\n                ...state,\r\n                drawingLists: [\r\n                    {\r\n                        id: listId++,\r\n                        name: payload.name\r\n                    },\r\n                    ...state.drawingLists,\r\n                ]\r\n            };\r\n        }\r\n        case GENERATE_NAME_LISTS: {\r\n            return {\r\n                drawingLists: payload.nameLists.map(list => {\r\n                    return {\r\n                        id: listId++,\r\n                        name: list\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_DRAWING_LIST: {\r\n            return {\r\n                ...state,\r\n                drawingLists: state.drawingLists.filter(list => payload.lists.indexOf(list.id) === -1)\r\n            };\r\n        }\r\n        case DELETE_ALL_DRAWING_LISTS: {\r\n            return {\r\n                ...state,\r\n                drawingLists: []\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { NOTIFY_MESSAGE }  from '../actionTypes';\r\n\r\nconst initialState = {\r\n    msg: '',\r\n    type: ''\r\n};\r\n\r\nexport default function notifyMsgReducer (state = initialState, action) {\r\n    const payload = action.payload;\r\n    switch (action.type) {\r\n        case NOTIFY_MESSAGE: {\r\n            return {\r\n                msg: payload.notify.msg,\r\n                type: payload.notify.type\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport drawingLists from './drawingLists';\r\nimport notifyMsg from './notifyMsg';\r\n\r\nexport default combineReducers({\r\n    drawingLists,\r\n    notifyMsg\r\n});","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './styles/common.scss'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}