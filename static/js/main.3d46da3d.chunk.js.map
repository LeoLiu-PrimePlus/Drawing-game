{"version":3,"sources":["components/CardHeader/index.js","components/SvgCircle/index.js","components/Notify/index.js","components/CountDown/index.js","store/selectors.js","components/Winner/index.js","components/DrawingView/index.js","store/actionTypes.js","components/DrawingList/index.js","store/actions.js","components/CardContent/index.js","App.js","reportWebVitals.js","store/reducers/drawingLists.js","store/reducers/index.js","store/store.js","index.js"],"names":["CardHeader","className","SvgCircle","done","max","radius","stroke","strokeWidth","children","size","length","Math","ceil","PI","remainingLength","width","height","viewBox","xmlns","r","cx","cy","strokeDasharray","strokeDashoffset","strokeLinecap","fill","defaultProps","Notify","message","type","CountDown","handleSelectMode","useState","countDownType","setCountDownType","counter","setCounter","counterMax","setMax","useEffect","timer","setInterval","clearInterval","handleCountDownType","maxLength","value","onChange","e","target","newCounter","parseInt","isNaN","onKeyDown","key","handleInputEnter","onClick","selectDrawingLists","state","drawingLists","Winner","useSelector","floor","random","name","DrawingView","step","setStep","SwitchTransition","mode","CSSTransition","addEndListener","node","addEventListener","classNames","ADD_DRAWING_LIST","GENERATE_NAME_LISTS","DELETE_DRAWING_LIST","DELETE_ALL_DRAWING_LISTS","DrawingList","dispatch","useDispatch","setName","deleteDrawingLists","setDeleteDrawingLists","toggleLists","setToggleLists","handleAddList","some","item","payload","addDrawingList","handleDeleteList","lists","handleDeleteAllLists","handleGengerateNameList","newDrawingLists","Array","map","randGenerateName","console","log","nameLists","numNameParts","randName","nameData","firstNameParts","forEach","newNamePart","test","otherNamePartsNonVowel","otherNamePartsVowel","handleInputChange","placeholder","aria-label","aria-describedby","id","list","checked","deleteLists","handleCheckBoxChange","CardContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","listId","combineReducers","action","filter","indexOf","createStore","rootReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.3d46da3d.chunk.js","sourcesContent":["import './style.scss'\r\n\r\nconst CardHeader = () => {\r\n    return (\r\n        <div className=\"cardHeader flex-center text-white bg-primary\">Lucky Draw</div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardHeader;","import './style.scss'\r\n\r\nconst SvgCircle = ({ className, done, max, radius, stroke, strokeWidth, children }) => {\r\n    const size = (radius + strokeWidth) * 2\r\n    const length = Math.ceil(2 * radius * Math.PI)\r\n    let remainingLength = 0\r\n    if (max !== 0) {\r\n        remainingLength = length - (Math.ceil(2 * radius * Math.PI) * (done / max))\r\n    }\r\n    \r\n    return (\r\n        <div className=\"svgContainer\">\r\n            <svg \r\n                className={className}\r\n                width={size}\r\n                height={size}\r\n                viewBox={`0 0 ${size} ${size}`}\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n                <g>\r\n                    <circle \r\n                        className=\"circle\"\r\n                        r={radius}\r\n                        cx={radius + strokeWidth} \r\n                        cy={radius + strokeWidth} \r\n                        stroke={stroke}\r\n                        strokeDasharray={length}\r\n                        strokeDashoffset={remainingLength}\r\n                        strokeLinecap=\"round\"\r\n                        strokeWidth={strokeWidth}\r\n                        fill=\"none\" \r\n                    />\r\n                    <circle \r\n                        className=\"circle--bg\"\r\n                        r={radius} \r\n                        cx={radius + strokeWidth}\r\n                        cy={radius + strokeWidth} \r\n                        stroke=\"rgba(0, 0, 0, .1)\"\r\n                        strokeLinecap=\"round\"\r\n                        strokeWidth={strokeWidth} \r\n                        fill=\"none\" \r\n                    />\r\n                </g>\r\n            </svg>\r\n            <div className=\"textContent fs-1\">{children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSvgCircle.defaultProps = {\r\n    done: 0,\r\n    max: 24,\r\n    radius: 100,\r\n    stroke: '#ff4759',\r\n    strokeWidth: 8,\r\n  }\r\n\r\nexport default SvgCircle;","import './style.scss'\r\n\r\nconst Notify = ({ message, type }) => {\r\n    return (\r\n        <div className={`notify text-white fs-6 border-m ${type === 'error' ? 'bg-danger' : 'bg-success'}`}>{message}</div>\r\n    );\r\n}\r\n\r\n\r\nexport default Notify;","import './style.scss'\r\nimport { useState, useEffect } from 'react';\r\nimport SvgCircle from '../SvgCircle'\r\nimport Notify from '../Notify'\r\n\r\nconst CountDown = ({handleSelectMode}) => {\r\n    const [countDownType, setCountDownType] = useState('set')\r\n    const [counter, setCounter] = useState(0);\r\n    const [counterMax, setMax] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const timer = countDownType === 'start' && counter >= 0 && setInterval(() => {\r\n            if (counter > 0) {\r\n                setCounter(counter - 1)\r\n            } else {\r\n                handleSelectMode('drawing');\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(timer);\r\n    }, [counter, countDownType, handleSelectMode]);\r\n\r\n    useEffect(() => {\r\n        if (countDownType === 'set') {\r\n            setMax(0)\r\n        } else if (countDownType === 'start') {\r\n            if (counterMax === 0) {\r\n                setMax(counter)\r\n            }\r\n        }\r\n    }, [counter, countDownType, counterMax])\r\n\r\n    const handleInputCounter = (e) => {\r\n        const target = e.target.value;\r\n        const newCounter = parseInt(target);\r\n        if (!isNaN(newCounter)) setCounter(newCounter);\r\n    }\r\n    \r\n    const handleCountDownType = (type) => {\r\n        if (type !== countDownType) {\r\n            setCountDownType(type)\r\n            if (type === 'set') setCounter(0)\r\n        };\r\n    }\r\n\r\n    const handleInputEnter = (type, e) => {\r\n        if (e.key === 'Enter') handleCountDownType(type)\r\n    }\r\n\r\n    return (\r\n        <div className=\"countDown flex-center\">\r\n            <div className=\"countDown-panel\">\r\n                {\r\n                    countDownType === 'set' ? (\r\n                        <div className=\"countDown-panel-clock mb-3\">\r\n                            <SvgCircle>\r\n                                <input className=\"countDown-panel-input\" maxLength=\"3\" type=\"text\" value={counter} onChange={handleInputCounter} onKeyDown={e => handleInputEnter('start', e)} />\r\n                            </SvgCircle>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"countDown-panel-clock mb-3\">\r\n                            <SvgCircle max={counterMax} done={counter}>{counter}</SvgCircle>\r\n                        </div>\r\n                    )\r\n                }\r\n                <div className=\"d-flex justify-content-between mb-3\">\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('start')}>Start</button>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('stop')}>Stop</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex justify-content-between mb-3\">\r\n                    <div className=\"mb-2\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('set')}>Reset</button>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Back</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Notify message={'test'} type={'error'} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CountDown;","export const selectDrawingLists = (state) => state.drawingLists.drawingLists;","import './style.scss'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDrawingLists } from '../../store/selectors';\r\n\r\nconst Winner = ({ handleSelectMode }) => {\r\n    const drawingLists = useSelector(selectDrawingLists);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"flex-center mb-4\">\r\n                {\r\n                    drawingLists.length > 0 ? (\r\n                        <div>\r\n                            Congratulation for the drawing game winner!!<br/>\r\n                            <div className=\"flex-center\">\r\n                                {drawingLists[Math.floor(Math.random() * drawingLists.length)].name}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                    :\r\n                    \"There's no drawing list, please add one at least.\"\r\n                }\r\n            </div>\r\n            <div className=\"flex-center\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Play again~!</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Winner;","import './style.scss';\r\nimport { useState } from 'react';\r\nimport CountDown from '../CountDown';\r\nimport { SwitchTransition, CSSTransition } from \"react-transition-group\";\r\nimport Winner from '../Winner'\r\n\r\nconst DrawingView = ({ className }) => {\r\n    const [step, setStep] = useState('init');\r\n\r\n    const handleSelectMode = (type) => {\r\n        if (type !== step) {\r\n            setStep(type)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`${className} drawingView flex-center`}>\r\n            <SwitchTransition mode={'out-in'}>\r\n                <CSSTransition\r\n                    key={step}\r\n                    addEndListener={(node, done) => {\r\n                    node.addEventListener(\"transitionend\", done, false);\r\n                    }}\r\n                    classNames=\"fade\"\r\n                >\r\n                    {\r\n                        step === 'init' ? (\r\n                            <div className=\"drawingView-panel flex-center\">\r\n                                {\r\n                                    step === 'init' ? (\r\n                                        <div>\r\n                                            <div className=\"mb-4\">\r\n                                                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('drawing')}>Start without set countdown</button>\r\n                                            </div>\r\n                                            <div>\r\n                                                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('countDown')}>Start set countdown</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    ) :\r\n                                    step === 'countDown' && <CountDown handleSelectMode={handleSelectMode}  />\r\n                                }\r\n                            </div> \r\n                        ) : step === 'countDown' ? (\r\n                            <div className=\"drawingView-panel flex-center\">\r\n                                <CountDown handleSelectMode={handleSelectMode} />\r\n                            </div> \r\n                        ) : <Winner handleSelectMode={handleSelectMode} />\r\n                    }\r\n                </CSSTransition>\r\n            </SwitchTransition>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DrawingView;","export const ADD_DRAWING_LIST = 'ADD_DRAWING_LIST';\r\nexport const GENERATE_NAME_LISTS = 'GENERATE_NAME_LISTS';\r\nexport const DELETE_DRAWING_LIST = 'DELETE_DRAWING_LIST';\r\nexport const DELETE_ALL_DRAWING_LISTS = 'DELETE_ALL_DRAWING_LISTS';","import './style.scss';\r\nimport nameData from '../../data/name.json'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectDrawingLists } from '../../store/selectors';\r\nimport { addDrawingList, generateNameLists, deleteDrawingList, deleteAllDrawingLists } from '../../store/actions';\r\nimport { useState } from 'react'\r\n\r\nconst DrawingList = ({ className }) => {\r\n    const drawingLists = useSelector(selectDrawingLists);\r\n    const dispatch = useDispatch();\r\n    const [name , setName] = useState('');\r\n    const [deleteDrawingLists, setDeleteDrawingLists] = useState([]);\r\n    const [toggleLists, setToggleLists] = useState(false);\r\n\r\n    const handleInputChange = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleInputEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setName(e.target.value);\r\n            handleAddList();\r\n        }\r\n    }\r\n\r\n    const handleCheckBoxChange = (e, id) => {\r\n        console.log(e.target.checked, id);\r\n        if (e.target.checked) {\r\n            const deleteLists = [...deleteDrawingLists, id];\r\n            setDeleteDrawingLists(deleteLists);\r\n        }\r\n    }\r\n\r\n    const handleAddList = () => {\r\n        const duplicateName = drawingLists.some(item => {\r\n            return item.name === name\r\n        })\r\n        if (!duplicateName) {\r\n            dispatch(addDrawingList(name));\r\n            setName('');\r\n        }\r\n    }\r\n\r\n    const handleDeleteList = () => {\r\n        dispatch(deleteDrawingList(deleteDrawingLists));\r\n    }\r\n\r\n    const handleDeleteAllLists = () => {\r\n        dispatch(deleteAllDrawingLists());\r\n    }\r\n\r\n    const handleGengerateNameList = () => {\r\n        const newDrawingLists = [...Array(20)].map(() => randGenerateName())\r\n        console.log(newDrawingLists)\r\n        dispatch(generateNameLists(newDrawingLists))\r\n    }\r\n\r\n    const randGenerateName = () => {\r\n        const numNameParts = Math.floor(Math.random() * 4) + 1;\r\n        let randName = nameData.firstNameParts[Math.floor(Math.random() * nameData.firstNameParts.length)];\r\n        [...Array(numNameParts)].forEach(name => {\r\n            let newNamePart = '';\r\n            if (/[^aeiou]/.test(randName[randName.length - 1])) {\r\n                newNamePart = nameData.otherNamePartsNonVowel[Math.floor(Math.random() * nameData.otherNamePartsNonVowel.length)];\r\n            } else {\r\n                newNamePart = nameData.otherNamePartsVowel[Math.floor(Math.random() * nameData.otherNamePartsVowel.length)];\r\n            }\r\n            randName += newNamePart\r\n        })\r\n        return randName\r\n    }\r\n\r\n    const handleToggleLists =() => {\r\n        setToggleLists(!toggleLists)\r\n    }\r\n\r\n    return (\r\n        <div className={`${className} drawingList`}>\r\n            \r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleGengerateNameList()}>Generate new lists</button>\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteList()}>Delete selected list</button>\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteAllLists()}>Delete all drawing list</button>\r\n            </div>\r\n            <div className=\"input-group-sm mb-3 d-flex\">\r\n                <input type=\"text\" className=\"w-50 form-control\" value={name} onChange={(e) => handleInputChange(e)} onKeyDown={e => handleInputEnter(e)} placeholder=\"Add list\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\"/>\r\n                <button className=\"btn btn-outline-secondary btn-sm\" type=\"button\" id=\"button-addon2\" onClick={() => handleAddList()}>Add list</button>\r\n            </div>\r\n            <div className={`drawingList-lists list-group border-m shadow ${toggleLists ? 'drawingList-lists-hide' : ''}`}>\r\n                <div className=\"drawingList-lists-toggle text-white\" onClick={() => handleToggleLists()}>Toggle lists</div>\r\n                {\r\n                    drawingLists.map(list => (\r\n                        <label className=\"list-group-item rounded-0\" key={list.id}>\r\n                            <input className=\"form-check-input me-1\" type=\"checkbox\" onChange={(e) => handleCheckBoxChange(e, list.id)} value=\"\" />\r\n                            { list.name }\r\n                        </label>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DrawingList;","import { ADD_DRAWING_LIST, GENERATE_NAME_LISTS, DELETE_DRAWING_LIST, DELETE_ALL_DRAWING_LISTS } from './actionTypes';\r\n\r\nexport const addDrawingList = (name) => {\r\n    return {\r\n        type: ADD_DRAWING_LIST,\r\n        payload: { name }\r\n    }\r\n}\r\n\r\nexport const generateNameLists = (nameLists) => {\r\n    return {\r\n        type: GENERATE_NAME_LISTS,\r\n        payload: { nameLists  }\r\n    }\r\n}\r\n\r\nexport const deleteDrawingList = (lists) => {\r\n    return {\r\n        type: DELETE_DRAWING_LIST,\r\n        payload: { lists }\r\n    }\r\n}\r\n\r\nexport const deleteAllDrawingLists = () => {\r\n    return {\r\n        type: DELETE_ALL_DRAWING_LISTS\r\n    }\r\n}","import './style.scss'\r\nimport DrawingView from '../DrawingView'\r\nimport DrawingList from '../DrawingList'\r\n\r\nconst CardContent = () => {\r\n    return (\r\n        <div className=\"cardContent bg-white row\">\r\n            <DrawingList className={'col-lg-4'} />\r\n            <DrawingView className={'col-12 col-lg-8'} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardContent;","import './App.scss';\nimport CardHeader from './components/CardHeader'\nimport CardContent from './components/CardContent'\n\nconst App = () => {\n  return (\n    <div className=\"main container\">\n      <div className=\"card col-12 border-l shadow p-0\">\n        <CardHeader />\n        <h4 className=\"tipTitle\">Please add drawinglists before you start this game</h4>\n        <CardContent />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_DRAWING_LIST, GENERATE_NAME_LISTS, DELETE_DRAWING_LIST, DELETE_ALL_DRAWING_LISTS } from '../actionTypes';\r\n\r\nconst initialState = {\r\n    drawingLists: []\r\n}\r\n\r\nlet listId = 0\r\n\r\nexport default function drawingListsReducer (state = initialState, action) {\r\n    const payload = action.payload;\r\n    switch (action.type) {\r\n        case ADD_DRAWING_LIST: {\r\n            return {\r\n                ...state,\r\n                drawingLists: [\r\n                    {\r\n                        id: listId++,\r\n                        name: payload.name\r\n                    },\r\n                    ...state.drawingLists,\r\n                ]\r\n            };\r\n        }\r\n        case GENERATE_NAME_LISTS: {\r\n            return {\r\n                drawingLists: payload.nameLists.map(list => {\r\n                    return {\r\n                        id: listId++,\r\n                        name: list\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_DRAWING_LIST: {\r\n            return {\r\n                ...state,\r\n                drawingLists: state.drawingLists.filter(list => payload.lists.indexOf(list.id) === -1)\r\n            };\r\n        }\r\n        case DELETE_ALL_DRAWING_LISTS: {\r\n            return {\r\n                ...state,\r\n                drawingLists: []\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport drawingLists from './drawingLists';\r\n\r\nexport default combineReducers({\r\n    drawingLists\r\n});","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './styles/common.scss'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}