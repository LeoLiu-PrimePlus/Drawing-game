{"version":3,"sources":["components/CardHeader/index.js","components/CountDown/index.js","store/selectors.js","components/DrawingView/index.js","store/actionTypes.js","components/DrawingList/index.js","store/actions.js","components/CardContent/index.js","App.js","reportWebVitals.js","store/reducers/drawingLists.js","store/reducers/index.js","store/store.js","index.js"],"names":["CardHeader","className","CountDown","handleSelectMode","useState","countDownType","setCountDownType","counter","setCounter","useEffect","timer","setInterval","console","log","clearInterval","handleCountDownType","type","value","onChange","e","target","newCounter","parseInt","isNaN","onKeyDown","key","handleInputEnter","onClick","selectDrawingLists","state","drawingLists","DrawingView","useSelector","step","setStep","length","Math","floor","random","name","ADD_DRAWING_LIST","GENERATE_NAME_LISTS","DELETE_DRAWING_LIST","DELETE_ALL_DRAWING_LISTS","DrawingList","dispatch","useDispatch","setName","deleteDrawingLists","setDeleteDrawingLists","handleAddList","duplicateName","some","item","payload","addDrawingList","handleDeleteList","lists","handleDeleteAllLists","handleGengerateNameList","newDrawingLists","Array","map","randGenerateName","nameLists","numNameParts","randName","nameData","firstNameParts","forEach","newNamePart","test","otherNamePartsNonVowel","otherNamePartsVowel","handleInputChange","placeholder","aria-label","aria-describedby","id","list","checked","deleteLists","handleCheckBoxChange","CardContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","listId","combineReducers","action","filter","indexOf","createStore","rootReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.5fa64e99.chunk.js","sourcesContent":["import './style.scss'\r\n\r\nconst CardHeader = () => {\r\n    return (\r\n        <div className=\"cardHeader flex-center text-white bg-primary\">Lucky Draw</div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardHeader;","import './style.scss'\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst CountDown = ({handleSelectMode}) => {\r\n    const [countDownType, setCountDownType] = useState('set')\r\n    const [counter, setCounter] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const timer = countDownType === 'start' && counter >= 0 && setInterval(() => {\r\n            if (counter > 0) {\r\n                setCounter(counter - 1)\r\n            } else {\r\n                console.log('too hard')\r\n                handleSelectMode('drawing');\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(timer);\r\n    }, [counter, countDownType, handleSelectMode]);\r\n\r\n    const handleInputCounter = (e) => {\r\n        const target = e.target.value;\r\n        const newCounter = parseInt(target);\r\n        console.log('newCounter', newCounter);\r\n        if (!isNaN(newCounter)) setCounter(newCounter);\r\n    }\r\n    \r\n    const handleCountDownType = (type) => {\r\n        if (type !== countDownType) {\r\n            setCountDownType(type)\r\n            if (type === 'set') setCounter(0)\r\n        };\r\n    }\r\n\r\n    const handleInputEnter = (type, e) => {\r\n        if (e.key === 'Enter') handleCountDownType(type)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    countDownType === 'set' ? (\r\n                        <div className=\"setCountDown-panel\">\r\n                            <input type=\"text\" value={counter} onChange={handleInputCounter} onKeyDown={e => handleInputEnter('start', e)} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"countDown-panel\">\r\n                            {counter}\r\n                        </div>\r\n                    )\r\n                }\r\n                <div className=\"mb-2\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('start')}>Start</button>\r\n                </div>\r\n                <div className=\"mb-2\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('stop')}>Stop</button>\r\n                </div>\r\n                <div className=\"mb-2\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('set')}>Reset</button>\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Back</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CountDown;","export const selectDrawingLists = (state) => state.drawingLists.drawingLists;","import './style.scss'\r\nimport { useSelector } from 'react-redux';\r\nimport { useState } from 'react';\r\nimport CountDown from '../CountDown'\r\nimport { selectDrawingLists } from '../../store/selectors';\r\n\r\nconst DrawingView = ({ className }) => {\r\n    const drawingLists = useSelector(selectDrawingLists);\r\n    const [step, setStep] = useState('init');\r\n\r\n    const handleSelectMode = (type) => {\r\n        if (type !== step) {\r\n            setStep(type)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`${className} drawingView flex-center`}>\r\n            {\r\n                step !== 'drawing' ? (\r\n                    <div className=\"drawingView-panel flex-center\">\r\n                        {\r\n                            step === 'init' ? (\r\n                                <div>\r\n                                    <div className=\"mb-2\">\r\n                                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('drawing')}>Start without set countdown</button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('countDown')}>Start set countdown</button>\r\n                                    </div>\r\n                                </div>\r\n                            ) :\r\n                            step === 'countDown' && <CountDown handleSelectMode={handleSelectMode}  />\r\n                        }\r\n                    </div> \r\n                ) : (\r\n                    <div>\r\n                        Congratulation for the drawing game winner!!\r\n                        <h2>\r\n                            {\r\n                                drawingLists.length > 0 ?\r\n                                drawingLists[Math.floor(Math.random() * drawingLists.length)].name :\r\n                                \"There's no drawing list, please add one at least.\"\r\n                            }\r\n                        </h2>\r\n                        <div>\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Play again~!</button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DrawingView;","export const ADD_DRAWING_LIST = 'ADD_DRAWING_LIST';\r\nexport const GENERATE_NAME_LISTS = 'GENERATE_NAME_LISTS';\r\nexport const DELETE_DRAWING_LIST = 'DELETE_DRAWING_LIST';\r\nexport const DELETE_ALL_DRAWING_LISTS = 'DELETE_ALL_DRAWING_LISTS';","import './style.scss';\r\nimport nameData from '../../data/name.json'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectDrawingLists } from '../../store/selectors';\r\nimport { addDrawingList, generateNameLists, deleteDrawingList, deleteAllDrawingLists } from '../../store/actions';\r\nimport { useState } from 'react'\r\n\r\nconst DrawingList = ({ className }) => {\r\n    const drawingLists = useSelector(selectDrawingLists);\r\n    const dispatch = useDispatch();\r\n    const [name , setName] = useState('');\r\n    const [deleteDrawingLists, setDeleteDrawingLists] = useState([]);\r\n    console.log('drawingLists', drawingLists)\r\n\r\n    const handleInputChange = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleInputEnter = (e) => {\r\n        if (e.key === 'Enter') {\r\n            setName(e.target.value);\r\n            handleAddList();\r\n        }\r\n    }\r\n\r\n    const handleCheckBoxChange = (e, id) => {\r\n        console.log(e.target.checked, id);\r\n        if (e.target.checked) {\r\n            const deleteLists = [...deleteDrawingLists, id];\r\n            setDeleteDrawingLists(deleteLists);\r\n        }\r\n    }\r\n\r\n    const handleAddList = () => {\r\n        const duplicateName = drawingLists.some(item => {\r\n            console.log(item.name, name)\r\n            return item.name === name\r\n        })\r\n        console.log('duplicateName', duplicateName)\r\n        if (!duplicateName) {\r\n            dispatch(addDrawingList(name));\r\n            setName('');\r\n        }\r\n    }\r\n\r\n    const handleDeleteList = () => {\r\n        console.log('deleteDrawingLists', deleteDrawingLists);\r\n        dispatch(deleteDrawingList(deleteDrawingLists));\r\n    }\r\n\r\n    const handleDeleteAllLists = () => {\r\n        dispatch(deleteAllDrawingLists());\r\n    }\r\n\r\n    const handleGengerateNameList = () => {\r\n        const newDrawingLists = [...Array(20)].map(() => randGenerateName())\r\n        console.log(newDrawingLists)\r\n        dispatch(generateNameLists(newDrawingLists))\r\n    }\r\n\r\n    const randGenerateName = () => {\r\n        const numNameParts = Math.floor(Math.random() * 4) + 1;\r\n        let randName = nameData.firstNameParts[Math.floor(Math.random() * nameData.firstNameParts.length)];\r\n        [...Array(numNameParts)].forEach(name => {\r\n            let newNamePart = '';\r\n            if (/[^aeiou]/.test(randName[randName.length - 1])) {\r\n                newNamePart = nameData.otherNamePartsNonVowel[Math.floor(Math.random() * nameData.otherNamePartsNonVowel.length)];\r\n            } else {\r\n                newNamePart = nameData.otherNamePartsVowel[Math.floor(Math.random() * nameData.otherNamePartsVowel.length)];\r\n            }\r\n            randName += newNamePart\r\n        })\r\n        return randName\r\n    }\r\n\r\n    return (\r\n        <div className={`${className} drawingList`}>\r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleGengerateNameList()}>Generate new lists</button>\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteList()}>Delete selected list</button>\r\n            </div>\r\n            <div className=\"mb-2\">\r\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteAllLists()}>Delete all drawing list</button>\r\n            </div>\r\n            <div className=\"input-group-sm mb-2\">\r\n                <input type=\"text\" className=\"form-control mb-1\" value={name} onChange={(e) => handleInputChange(e)} onKeyDown={e => handleInputEnter(e)} placeholder=\"Add list\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\"/>\r\n                <button className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => handleAddList()}>Add list</button>\r\n            </div>\r\n            <div className=\"drawingList-lists list-group border-m shadow\">\r\n                {\r\n                    drawingLists.map(list => (\r\n                        <label className=\"list-group-item rounded-0\" key={list.id}>\r\n                            <input className=\"form-check-input me-1\" type=\"checkbox\" onChange={(e) => handleCheckBoxChange(e, list.id)} value=\"\" />\r\n                            { list.name }\r\n                        </label>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DrawingList;","import { ADD_DRAWING_LIST, GENERATE_NAME_LISTS, DELETE_DRAWING_LIST, DELETE_ALL_DRAWING_LISTS } from './actionTypes';\r\n\r\nexport const addDrawingList = (name) => {\r\n    return {\r\n        type: ADD_DRAWING_LIST,\r\n        payload: { name }\r\n    }\r\n}\r\n\r\nexport const generateNameLists = (nameLists) => {\r\n    return {\r\n        type: GENERATE_NAME_LISTS,\r\n        payload: { nameLists  }\r\n    }\r\n}\r\n\r\nexport const deleteDrawingList = (lists) => {\r\n    return {\r\n        type: DELETE_DRAWING_LIST,\r\n        payload: { lists }\r\n    }\r\n}\r\n\r\nexport const deleteAllDrawingLists = () => {\r\n    return {\r\n        type: DELETE_ALL_DRAWING_LISTS\r\n    }\r\n}","import './style.scss'\r\nimport DrawingView from '../DrawingView'\r\nimport DrawingList from '../DrawingList'\r\n\r\nconst CardContent = () => {\r\n    return (\r\n        <div className=\"cardContent bg-white row\">\r\n            <DrawingView className={'col-8'} />\r\n            <DrawingList className={'col-4'} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardContent;","import './App.scss';\nimport CardHeader from './components/CardHeader'\nimport CardContent from './components/CardContent'\n\nconst App = () => {\n  return (\n    <div className=\"main\">\n      <div className=\"card border-l shadow\">\n        <CardHeader />\n        <CardContent />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_DRAWING_LIST, GENERATE_NAME_LISTS, DELETE_DRAWING_LIST, DELETE_ALL_DRAWING_LISTS } from '../actionTypes';\r\n\r\nconst initialState = {\r\n    drawingLists: []\r\n}\r\n\r\nlet listId = 0\r\n\r\nexport default function drawingListsReducer (state = initialState, action) {\r\n    const payload = action.payload;\r\n    switch (action.type) {\r\n        case ADD_DRAWING_LIST: {\r\n            return {\r\n                ...state,\r\n                drawingLists: [\r\n                    {\r\n                        id: listId++,\r\n                        name: payload.name\r\n                    },\r\n                    ...state.drawingLists,\r\n                ]\r\n            };\r\n        }\r\n        case GENERATE_NAME_LISTS: {\r\n            return {\r\n                drawingLists: payload.nameLists.map(list => {\r\n                    return {\r\n                        id: listId++,\r\n                        name: list\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_DRAWING_LIST: {\r\n            return {\r\n                ...state,\r\n                drawingLists: state.drawingLists.filter(list => payload.lists.indexOf(list.id) === -1)\r\n            };\r\n        }\r\n        case DELETE_ALL_DRAWING_LISTS: {\r\n            return {\r\n                ...state,\r\n                drawingLists: []\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport drawingLists from './drawingLists';\r\n\r\nexport default combineReducers({\r\n    drawingLists\r\n});","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}