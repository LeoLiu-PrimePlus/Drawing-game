{"version":3,"sources":["components/Header/index.js","components/SvgCircle/index.js","components/common/Button/index.js","store/actionTypes.js","store/actions.js","components/CountDown/index.js","store/selectors.js","components/Winner/index.js","components/DrawingView/index.js","components/DrawingList/index.js","components/Content/index.js","components/common/Notify/index.js","App.js","reportWebVitals.js","store/reducers/drawingLists.js","store/reducers/notifyMsg.js","store/reducers/step.js","store/reducers/index.js","store/store.js","index.js"],"names":["Header","className","SvgCircle","done","max","radius","stroke","strokeWidth","circleBgColor","children","useState","width","setWindowWidth","useEffect","updateDimensions","window","addEventListener","removeEventListener","size","length","Math","ceil","PI","remainingLength","innerWidth","height","viewBox","xmlns","r","cx","cy","strokeDasharray","strokeDashoffset","strokeLinecap","fill","defaultProps","Button","label","handleClick","param","type","onClick","ADD_DRAWING_LIST","GENERATE_NAME_LISTS","DELETE_DRAWING_LIST","DELETE_ALL_DRAWING_LISTS","NOTIFY_MESSAGE","CHANGE_STEP","notifyMessage","notify","payload","changeStep","step","CountDown","handleSelectMode","countDownType","setCountDownType","counter","setCounter","counterMax","setMax","minTen","setMinTen","min","setMin","secTen","setSecTen","sec","setSec","dispatch","useDispatch","minTenInput","minInput","secTenInput","secInput","timer","setInterval","floor","clearInterval","handleInputTime","e","timeType","target","value","newCounter","parseInt","isNaN","focus","handleInputEnter","key","handleCountDownType","deleteInputTime","timeInputFieldMove","msg","maxLength","ref","input","onChange","onKeyDown","selectDrawingLists","state","drawingLists","selectNotifyMsg","notifyMsg","selectStep","Winner","useSelector","random","name","DrawingView","id","DrawingList","setName","deleteDrawingLists","setDeleteDrawingLists","toggleLists","setToggleLists","handleAddList","duplicateName","some","item","addDrawingList","randGenerateName","numNameParts","randName","nameData","firstNameParts","Array","forEach","newNamePart","test","otherNamePartsNonVowel","otherNamePartsVowel","newDrawingLists","map","nameLists","lists","handleInputChange","placeholder","aria-label","aria-describedby","list","checked","deleteLists","handleCheckBoxChange","Content","Notify","closeNotify","setTimeout","clearTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","listId","combineReducers","action","filter","indexOf","createStore","rootReducer","ReactDOM","render","store","document","getElementById"],"mappings":"u6BAMeA,EAJA,WACb,OAAO,oBAAIC,UAAU,oBAAd,yB,qBCAHC,G,YAAY,SAAC,GASZ,IARLD,EAQI,EARJA,UACAE,EAOI,EAPJA,KACAC,EAMI,EANJA,IACAC,EAKI,EALJA,OACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cACAC,EACI,EADJA,SACI,EAC4BC,mBAAS,GADrC,mBACGC,EADH,KACUC,EADV,KAGJC,qBAAU,WAGR,OAFAC,IACAC,OAAOC,iBAAiB,SAAUF,GAC3B,kBACLC,OAAOE,oBAAoB,SAASH,MACrC,IACCH,EAAQ,MAAKN,EAAS,KAC1B,IAAMa,EAAgC,GAAxBb,EAASE,GACjBY,EAASC,KAAKC,KAAK,EAAIhB,EAASe,KAAKE,IACvCC,EAAkB,EACV,IAARnB,IACFmB,EAAkBJ,EAASC,KAAKC,KAAK,EAAIhB,EAASe,KAAKE,KAAOnB,EAAOC,IAIvE,IAAMU,EAAmB,WACvB,IAAMH,EAAQI,OAAOS,WACrBZ,EAAeD,IAGjB,OACE,sBAAKV,UAAU,eAAf,UACE,qBACEA,UAAWA,EACXU,MAAOO,EACPO,OAAQP,EACRQ,QAAO,cAASR,EAAT,YAAiBA,GACxBS,MAAM,6BALR,SAOE,8BACE,wBACE1B,UAAS,iBAAYA,GACrB2B,EAAGvB,EACHwB,GAAIxB,EAASE,EACbuB,GAAIzB,EAASE,EACbD,OAAQA,EACRyB,gBAAiBZ,EACjBa,iBAAkBT,EAClBU,cAAc,QACd1B,YAAaA,EACb2B,KAAK,qBAEP,wBACEjC,UAAU,aACV2B,EAAGvB,EACHwB,GAAIxB,EAASE,EACbuB,GAAIzB,EAASE,EACbD,OAAO,oBACP2B,cAAc,QACd1B,YAAaA,EACb2B,KAAM1B,SAIZ,qBAAKP,UAAU,cAAf,SAA8BQ,SAKpCP,EAAUiC,aAAe,CACvBhC,KAAM,EACNC,IAAK,GACLC,OAAQ,IACRC,OAAQ,UACRC,YAAa,IAGAL,QCpEAkC,G,MAZA,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,MAAOtC,EAA0B,EAA1BA,UAAWQ,EAAe,EAAfA,SACtD,OACE,yBACI+B,KAAK,SACLvC,UAAWA,EACXwC,QAAS,kBAAMH,EAAYC,IAH/B,UAKK9B,EAAU4B,O,OCTNK,EAAmB,mBACnBC,EAAsB,sBACtBC,EAAsB,sBACtBC,EAA2B,2BAC3BC,EAAiB,iBACjBC,EAAc,cC+BdC,EAAgB,SAACC,GAC5B,MAAO,CACLT,KAAMM,EACNI,QAAS,CAAED,YAIFE,EAAa,SAACC,GACzB,MAAO,CACLZ,KAAMO,EACNG,QAAS,CAAEE,UCkNAC,EAzPG,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,iBAAuB,EACA5C,mBAAS,OADT,mBACnC6C,EADmC,KACpBC,EADoB,OAEZ9C,mBAAS,GAFG,mBAEnC+C,EAFmC,KAE1BC,EAF0B,OAGbhD,mBAAS,GAHI,mBAGnCiD,EAHmC,KAGvBC,EAHuB,OAIdlD,mBAAS,GAJK,mBAInCmD,EAJmC,KAI3BC,EAJ2B,OAKpBpD,mBAAS,GALW,mBAKnCqD,EALmC,KAK9BC,EAL8B,OAMdtD,mBAAS,GANK,mBAMnCuD,EANmC,KAM3BC,EAN2B,OAOpBxD,mBAAS,GAPW,mBAOnCyD,EAPmC,KAO9BC,EAP8B,KAQpCC,EAAWC,cACbC,EAAc,KACdC,EAAW,KACXC,EAAc,KACdC,EAAW,KAEf7D,qBAAU,WACR,IAAM8D,EACc,UAAlBpB,GACAE,GAAW,GACXmB,aAAY,WACV,GAAInB,EAAU,EAAG,CACfC,EAAWD,EAAU,GAErBK,EAAU1C,KAAKyD,MAAMpB,EADsCU,MAE3DH,EAAO5C,KAAKyD,MAAMpB,EAFyCU,IAAnBA,KAGxCD,EAAU9C,KAAKyD,MAAMpB,EAHmBU,GAAhBA,KAIxBC,EAAOhD,KAAKyD,MAAMpB,EAJMU,UAKH,IAAZV,GACTH,EAAiB,aAElB,KACL,OAAO,kBAAMwB,cAAcH,MAC1B,CAAClB,EAASF,EAAeD,IAE5BzC,qBAAU,WACc,QAAlB0C,EACFK,EAAO,GACoB,UAAlBL,GACU,IAAfI,GACFC,EAAOH,KAGV,CAACA,EAASF,EAAeI,IAE5B,IAAMoB,EAAkB,SAACC,EAAGC,GAC1B,IAAMC,EAASF,EAAEE,OAAOC,MACpBC,EAAaC,SAASH,GACtBE,GAAc,KAChBA,EAAahE,KAAKyD,MAAMO,EAAa,KAEtB,WAAbH,EACGK,MAAMF,KACTtB,EAAUsB,GACVZ,EAASe,SAEW,QAAbN,EACJK,MAAMF,KACTpB,EAAOoB,GACPX,EAAYc,SAEQ,WAAbN,EACJK,MAAMF,KACLA,EAAa,IAAGA,EAAa,GACjClB,EAAUkB,GACVV,EAASa,SAGND,MAAMF,KACM,IAAXnB,IAAcmB,EAAa,GAC/BhB,EAAOgB,KAoBPI,EAAmB,SAACR,EAAGzB,EAAe0B,GAC5B,UAAVD,EAAES,IACJC,EAAoBnC,GACD,cAAVyB,EAAES,IAlBS,SAACR,GACN,WAAbA,EACFnB,EAAU,GACY,QAAbmB,GACTV,EAAYgB,QACZvB,EAAO,IACe,WAAbiB,GACTT,EAASe,QACTrB,EAAU,IACY,QAAbe,IACTR,EAAYc,QACZnB,EAAO,IAQPuB,CAAgBV,GACG,cAAVD,EAAES,KAAiC,eAAVT,EAAES,KACpCG,EAAmBX,EAAUD,EAAES,MAK7BC,EAAsB,SAAClD,GAC3B,GAAIA,IAASe,EAAe,CAC1B,GAAa,UAATf,EAAkB,CACpB,IAAM4C,EAAsB,GAATvB,EAAc,GAAW,GAANE,EAAoB,GAATE,EAAcE,EAC/D,IAAKmB,MAAMF,GAET,GADA1B,EAAW0B,GACPA,GAA6B,IAAfA,EAChB5B,EAAiBhB,OACZ,CAKL6B,EAASrB,EAJS,CAChB6C,IAAK,qBACLrD,KAAM,iBAKP,GAAa,SAATA,EACT,GAAIiB,GAAuB,IAAZA,EACbD,EAAiBhB,OACZ,CAKL6B,EAASrB,EAJS,CAChB6C,IAAK,qBACLrD,KAAM,gBAKVgB,EAAiBhB,GAEN,QAATA,IACFkB,EAAW,GACXI,EAAU,GACVE,EAAO,GACPE,EAAU,GACVE,EAAO,MAKPwB,EAAqB,SAACX,EAAUQ,GACnB,WAAbR,GAAiC,eAARQ,EAC3BjB,EAASe,QACa,QAAbN,GAA8B,eAARQ,EAC/BhB,EAAYc,QACU,QAAbN,GAA8B,cAARQ,EAC/BlB,EAAYgB,QACU,WAAbN,GAAiC,eAARQ,EAClCf,EAASa,QACa,WAAbN,GAAiC,cAARQ,EAClCjB,EAASe,QACa,QAAbN,GAA8B,cAARQ,GAC/BhB,EAAYc,SAIhB,OACE,sBAAKtF,UAAU,sBAAf,UAEsB,QAAlBsD,EACE,qBAAKtD,UAAU,+BAAf,SACE,cAAC,EAAD,CAAWO,cAAe,UAA1B,SACE,gCACE,sBAAKP,UAAU,2BAAf,UACE,uBACEA,UAAU,yBACV6F,UAAU,IACVtD,KAAK,OACLuD,IAAK,SAACC,GAAYzB,EAAcyB,GAChCb,MAAOtB,EACPoC,SAAU,SAAAjB,GAAC,OAAID,EAAgBC,EAAE,WACjCkB,UAAW,SAAClB,GAAD,OAAOQ,EAAiBR,EAAG,QAAS,aAEjD,uBACE/E,UAAU,yBACV6F,UAAU,IACVtD,KAAK,OACLuD,IAAK,SAACC,GAAYxB,EAAWwB,GAC7Bb,MAAOpB,EACPkC,SAAU,SAAAjB,GAAC,OAAID,EAAgBC,EAAE,QACjCkB,UAAW,SAAClB,GAAD,OAAOQ,EAAiBR,EAAG,QAAS,UAEjD,qCACA,uBACE/E,UAAU,yBACV6F,UAAU,IACVtD,KAAK,OACLuD,IAAK,SAACC,GAAYvB,EAAcuB,GAChCb,MAAOlB,EACPgC,SAAU,SAAAjB,GAAC,OAAID,EAAgBC,EAAE,WACjCkB,UAAW,SAAClB,GAAD,OAAOQ,EAAiBR,EAAG,QAAS,aAEjD,uBACE/E,UAAU,yBACV6F,UAAU,IACVtD,KAAK,OACLuD,IAAK,SAACC,GAAYtB,EAAWsB,GAC7Bb,MAAOhB,EACP8B,SAAU,SAAAjB,GAAC,OAAID,EAAgBC,EAAE,QACjCkB,UAAW,SAAClB,GAAD,OAAOQ,EAAiBR,EAAG,QAAS,aAGnD,sBAAK/E,UAAU,iCAAf,UACE,cAAC,EAAD,CAAQA,UAAW,2BAA4BsC,MAAO,QAASD,YAAaoD,EAA5E,SACE,mBAAGzF,UAAU,yBAEf,cAAC,EAAD,CAAQA,UAAW,2BAA4BsC,MAAO,OAAQD,YAAaoD,EAA3E,SACE,mBAAGzF,UAAU,0BAEf,cAAC,EAAD,CAAQA,UAAW,2BAA4BsC,MAAO,MAAOD,YAAaoD,EAA1E,SACE,mBAAGzF,UAAU,iCAQvB,qBAAKA,UAAU,+BAAf,SACE,eAAC,EAAD,CAAWA,UAAW,eAAgBG,IAAKuD,EAAYxD,KAAMsD,EAASjD,cAAe,UAArF,UACE,sBAAKP,UAAU,kDAAf,UACG4D,EAAQE,EADX,IACiBE,EAAQE,KAEzB,sBAAKlE,UAAU,iCAAf,UACE,cAAC,EAAD,CAAQA,UAAW,kCAAmCsC,MAAO,QAASD,YAAaoD,EAAnF,SACE,mBAAGzF,UAAU,yBAEf,cAAC,EAAD,CAAQA,UAAW,kCAAmCsC,MAAO,OAAQD,YAAaoD,EAAlF,SACE,mBAAGzF,UAAU,0BAEf,cAAC,EAAD,CAAQA,UAAW,kCAAmCsC,MAAO,MAAOD,YAAaoD,EAAjF,SACE,mBAAGzF,UAAU,+BAOzB,sBAAKA,UAAU,gDAAf,UACE,cAAC,EAAD,CAAQoC,MAAO,OAAQpC,UAAW,6BAA8BsC,MAAO,OAAQD,YAAagB,EAA5F,SACE,mBAAGrD,UAAU,6BAEf,cAAC,EAAD,CAAQoC,MAAO,OAAQpC,UAAW,4BAA6BsC,MAAO,aAAcD,YAAagB,EAAjG,SACE,mBAAGrD,UAAU,gCAGjB,qBAAKA,UAAU,gDC3PRkG,G,MAAqB,SAACC,GAAD,OAAWA,EAAMC,aAAaA,eACnDC,EAAkB,SAACF,GAAD,OAAWA,EAAMG,WACnCC,EAAa,SAACJ,GAAD,OAAWA,EAAMhD,MCiC5BqD,EA9BA,SAAC,GAA0B,IAAxBnD,EAAuB,EAAvBA,iBACV+C,EAAeK,YAAYP,GAEjC,OACE,sBAAKlG,UAAU,eAAf,UACE,qBAAKA,UAAU,6CAAf,SACGoG,EAAalF,OAAS,EACrB,sBAAKlB,UAAU,qBAAf,yDAEE,uBACA,qBAAKA,UAAU,sCAAf,SAEIoG,EAAajF,KAAKyD,MAAMzD,KAAKuF,SAAWN,EAAalF,SAClDyF,UAKT,uDAGJ,qBAAK3G,UAAU,cAAf,SACE,cAAC,EAAD,CAAQoC,MAAO,eAAgBpC,UAAW,iCAAkCsC,MAAO,OAAQD,YAAagB,EAAxG,SACE,mBAAGrD,UAAU,4CCmDR4G,EAvEK,SAAC,GAAmB,IAAjB5G,EAAgB,EAAhBA,UACfoG,EAAeK,YAAYP,GAC3B/C,EAAOsD,YAAYF,GACnBnC,EAAWC,cAEXhB,EAAmB,SAACd,GACxB,GAAIA,IAASY,EACX,GACY,YAATZ,GAA+B,cAATA,GACC,IAAxB6D,EAAalF,OAQbkD,EAASlB,EAAWX,QAPpB,CAKA6B,EAASrB,EAJS,CAChB6C,IAAK,qDACLrD,KAAM,aASd,OACE,qBAAKsE,GAAG,WAAW7G,UAAS,UAAKA,EAAL,YAA2B,SAATmD,EAAkB,MAAQ,GAA5C,sBAA5B,SACY,SAATA,EACC,qBAAKnD,UAAU,+BAAf,SACY,SAATmD,EACC,gCACE,qBAAKnD,UAAU,iCAAf,SACE,cAAC,EAAD,CAAQoC,MAAO,8BAA+BpC,UAAW,qBAAsBsC,MAAO,UAAWD,YAAagB,EAA9G,SACE,mBAAGrD,UAAU,uCAGjB,qBAAKA,UAAU,iCAAf,SACE,cAAC,EAAD,CAAQoC,MAAO,sBAAuBpC,UAAW,qBAAsBsC,MAAO,YAAaD,YAAagB,EAAxG,SACE,mBAAGrD,UAAU,qCAGjB,oBAAIA,UAAU,sBAAd,uEAKO,cAATmD,GACE,cAAC,EAAD,CAAWE,iBAAkBA,MAIxB,cAATF,EACF,qBAAKnD,UAAU,0BAAf,SACE,cAAC,EAAD,CAAWqD,iBAAkBA,MAEpB,eAATF,EACF,qBAAKnD,UAAU,oBAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQoC,MAAO,8BAA+BpC,UAAW,2BAA4BsC,MAAO,UAAWD,YAAagB,EAApH,SACE,mBAAGrD,UAAU,qCAEf,uBACA,cAAC,EAAD,CAAQoC,MAAO,sBAAuBpC,UAAW,sBAAuBsC,MAAO,YAAaD,YAAagB,EAAzG,SACE,mBAAGrD,UAAU,wCAKnB,cAAC,EAAD,CAAQqD,iBAAkBA,O,sBC+GnByD,EAzKK,SAAC,GAAmB,IAAjB9G,EAAgB,EAAhBA,UACfoG,EAAeK,YAAYP,GAC3B9B,EAAWC,cAFoB,EAGb5D,mBAAS,IAHI,mBAG9BkG,EAH8B,KAGxBI,EAHwB,OAIetG,mBAAS,IAJxB,mBAI9BuG,EAJ8B,KAIVC,EAJU,OAKCxG,oBAAS,GALV,mBAK9ByG,EAL8B,KAKjBC,EALiB,KAyB/BC,EAAgB,WACpB,IAAMC,EAAgBjB,EAAakB,MAAK,SAACC,GACvC,OAAOA,EAAKZ,OAASA,KAEvB,GAAKU,GAA0B,KAATV,GAGf,GAAIU,EAAe,CAKxBjD,EAASrB,EAJS,CAChB6C,IAAK,iBACLrD,KAAM,gBAGH,GAAa,KAAToE,EAAa,CAKtBvC,EAASrB,EAJS,CAChB6C,IAAK,oBACLrD,KAAM,iBAXR6B,ELpCwB,SAACuC,GAC7B,MAAO,CACLpE,KAAME,EACNQ,QAAS,CAAE0D,SKiCAa,CAAeb,IACxBI,EAAQ,KA6BNU,EAAmB,WACvB,IAAMC,EAAevG,KAAKyD,MAAsB,EAAhBzD,KAAKuF,UAAgB,EACjDiB,EACFC,EAASC,eACP1G,KAAKyD,MAAMzD,KAAKuF,SAAWkB,EAASC,eAAe3G,SAiBvD,OAfA,YAAI4G,MAAMJ,IAAeK,SAAQ,SAACpB,GAChC,IAAIqB,EAAc,GAEhBA,EADE,WAAWC,KAAKN,EAASA,EAASzG,OAAS,IAE3C0G,EAASM,uBACP/G,KAAKyD,MAAMzD,KAAKuF,SAAWkB,EAASM,uBAAuBhH,SAI7D0G,EAASO,oBACPhH,KAAKyD,MAAMzD,KAAKuF,SAAWkB,EAASO,oBAAoBjH,SAG9DyG,GAAYK,KAEPL,GAmBT,OACE,sBAAK3H,UAAS,UAAKA,EAAL,gBAAd,UACE,qBAAKA,UAAU,iCAAf,SACE,cAAC,EAAD,CAAQoC,MAAO,qBAAsBpC,UAAW,iBAAkBqC,YAhDxC,WAC9B,IAAM+F,EAAkB,YAAIN,MAAM,KAAKO,KAAI,kBAAMZ,OACjDrD,ELvDK,CACL7B,KAAMG,EACNO,QAAS,CAAEqF,UKqDgBF,MA8CvB,SACE,mBAAGpI,UAAU,oCAGjB,qBAAKA,UAAU,OAAf,SACE,cAAC,EAAD,CAAQoC,MAAO,uBAAwBpC,UAAW,iBAAkBqC,YA7DjD,WACvB+B,ELvCK,CACL7B,KAAMI,EACNM,QAAS,CAAEsF,MKqCgBvB,MA4DvB,SACE,mBAAGhH,UAAU,yCAGjB,qBAAKA,UAAU,OAAf,SACE,cAAC,EAAD,CAAQoC,MAAO,0BAA2BpC,UAAW,iBAAkBqC,YA9DhD,WAC3B+B,ELpCK,CACL7B,KAAMK,KKgGF,SACE,mBAAG5C,UAAU,yCAGjB,sBAAKA,UAAU,gDAAf,UACE,uBACEuC,KAAK,OACLvC,UAAU,oBACVkF,MAAOyB,EACPX,SAAU,SAACjB,GAAD,OAnHQ,SAACA,GACzBgC,EAAQhC,EAAEE,OAAOC,OAkHMsD,CAAkBzD,IACnCkB,UAAW,SAAClB,GAAD,OAhHM,SAACA,GACV,UAAVA,EAAES,MACJuB,EAAQhC,EAAEE,OAAOC,OACjBkC,KA6GsB7B,CAAiBR,IACnC0D,YAAY,WACZC,aAAW,uBACXC,mBAAiB,kBAEnB,cAAC,EAAD,CAAQ3I,UAAW,sBAAuBqC,YAAa+E,EAAvD,SACE,mBAAGpH,UAAU,4CAGjB,sBACEA,UAAU,+BADZ,UAGE,oBAAIA,UAAS,8CAAyCoG,EAAalF,OAAS,EAAI,mCAAqC,IAArH,2BAIEkF,EAAalF,OAAS,GACtB,qBACElB,UAAU,2BACVwC,QAAS,WAzDjB2E,GAAgBD,IAuDV,0BAOF,qBAAKlH,UAAS,oCACZkH,EAAc,iCAAmC,IADnD,SAGGd,EAAalF,OAAS,EACrBkF,EAAaiC,KAAI,SAACO,GAAD,OACf,wBAAO5I,UAAU,uCAAjB,UACE,uBAAOA,UAAU,wBAAwBuC,KAAK,QAAQyD,SAAU,SAACjB,GAAD,OAvIjD,SAACA,EAAG8B,GAC/B,GAAI9B,EAAEE,OAAO4D,QAAS,CACpB,IAAMC,EAAW,sBAAO9B,GAAP,CAA2BH,IAC5CI,EAAsB6B,IAoI2DC,CAAqBhE,EAAG6D,EAAK/B,OACnG+B,EAAKjC,OAFqDiC,EAAK/B,OAMpE,qBAAK7G,UAAU,iBAAf,qEAMN,cAAC,EAAD,CAAQoC,MAAO,OAAQpC,UAAW,iCAAkCqC,YA5E1C,WAC5B,GAA4B,IAAxB+D,EAAalF,OAAc,CAK7BkD,EAASrB,EAJS,CAChB6C,IAAK,yBACLrD,KAAM,gBAIR6B,EAASlB,EAAW,sBCvFX8F,EAjBC,WACd,IAAM7F,EAAOsD,YAAYF,GACzB,OACE,qBAAKvG,UAAU,wBAAf,SAEiB,SAATmD,EACE,qCACE,cAAC,EAAD,CAAanD,UAAW,uCACxB,cAAC,EAAD,CAAaA,UAAW,mCAEzB,cAAC,EAAD,CAAaA,UAAW,cCiBxBiJ,G,MA5BA,WACb,IAAM3C,EAAYG,YAAYJ,GACxBjC,EAAWC,cAejB,OAbAzD,qBAAU,WACR,IAAMsI,EAAcC,YAAW,WAK7B/E,EAASrB,EAJS,CAChB6C,IAAK,GACLrD,KAAM,QAGP,KACH,OAAO,WACL6G,aAAaF,MAEd,CAAC9E,EAAUkC,IAGZ,qBACEtG,UAAS,0CACY,UAAnBsG,EAAU/D,KAAmB,YAAc,aADpC,YAEa,KAAlB+D,EAAUV,IAAa,2BAA6B,IAH1D,SAKGU,EAAUV,QCZFyD,EAZH,WACV,OACE,sBAAKrJ,UAAU,OAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEF,cAAC,EAAD,QCASsJ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCARQ,EAAe,CACnB3D,aAAc,IAGZ4D,EAAS,ECTb,IAAMD,EAAe,CACnBnE,IAAK,GACLrD,KAAM,ICFR,IAAMwH,EAAe,OCGNE,kBAAgB,CAC7B7D,aHOa,WAA4D,IAA/BD,EAA8B,uDAAtB4D,EAAcG,EAAQ,uCAClEjH,EAAUiH,EAAOjH,QACvB,OAAQiH,EAAO3H,MACb,KAAKE,EACH,OAAO,2BACF0D,GADL,IAEEC,aAAa,CACX,CACES,GAAImD,IACJrD,KAAM1D,EAAQ0D,OAHN,mBAKPR,EAAMC,iBAIf,KAAK1D,EACH,MAAO,CACL0D,aAAcnD,EAAQqF,UAAUD,KAAI,SAACO,GACnC,MAAO,CACL/B,GAAImD,IACJrD,KAAMiC,OAKd,KAAKjG,EACH,OAAO,2BACFwD,GADL,IAEEC,aAAcD,EAAMC,aAAa+D,QAC/B,SAACvB,GAAD,OAA8C,IAApC3F,EAAQsF,MAAM6B,QAAQxB,EAAK/B,SAI3C,KAAKjE,EACH,OAAO,2BACFuD,GADL,IAEEC,aAAc,KAGlB,QACE,OAAOD,IG9CXG,UFAa,WAAyD,IAA/BH,EAA8B,uDAAtB4D,EAAcG,EAAQ,uCAC/DjH,EAAUiH,EAAOjH,QACvB,OAAQiH,EAAO3H,MACb,KAAKM,EACH,MAAO,CACL+C,IAAK3C,EAAQD,OAAO4C,IACpBrD,KAAMU,EAAQD,OAAOT,MAGzB,QACE,OAAO4D,IETXhD,KDJa,WAA0D,IAA/BgD,EAA8B,uDAAtB4D,EAAcG,EAAQ,uCAC9DjH,EAAUiH,EAAOjH,QACvB,OAAQiH,EAAO3H,MACX,KAAKO,EACD,OAAOG,EAAQE,KAEnB,QACI,OAAOgD,MERJkE,cAAYC,GCM3BC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.8c8c8c41.chunk.js","sourcesContent":["import \"./style.scss\";\n\nconst Header = () => {\n  return <h1 className=\"header text-white\">Lucky Draw</h1>;\n};\n\nexport default Header;\n","import \"./style.scss\";\nimport { useState, useEffect } from \"react\";\n\nconst SvgCircle = ({\n  className,\n  done,\n  max,\n  radius,\n  stroke,\n  strokeWidth,\n  circleBgColor,\n  children,\n}) => {\n  const [width, setWindowWidth] = useState(0)\n\n  useEffect(() => { \n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    return () => \n      window.removeEventListener('resize',updateDimensions);\n  }, [])\n  if (width < 576) radius = 160;\n  const size = (radius + strokeWidth) * 2;\n  const length = Math.ceil(2 * radius * Math.PI);\n  let remainingLength = 0;\n  if (max !== 0) {\n    remainingLength = length - Math.ceil(2 * radius * Math.PI) * (done / max);\n  }\n\n\n  const updateDimensions = () => {\n    const width = window.innerWidth\n    setWindowWidth(width)\n  }\n\n  return (\n    <div className=\"svgContainer\">\n      <svg\n        className={className}\n        width={size}\n        height={size}\n        viewBox={`0 0 ${size} ${size}`}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g>\n          <circle\n            className={`circle ${className}`}\n            r={radius}\n            cx={radius + strokeWidth}\n            cy={radius + strokeWidth}\n            stroke={stroke}\n            strokeDasharray={length}\n            strokeDashoffset={remainingLength}\n            strokeLinecap=\"round\"\n            strokeWidth={strokeWidth}\n            fill=\"rgba(0, 0, 0, 0)\"\n          />\n          <circle\n            className=\"circle--bg\"\n            r={radius}\n            cx={radius + strokeWidth}\n            cy={radius + strokeWidth}\n            stroke=\"rgba(0, 0, 0, .1)\"\n            strokeLinecap=\"round\"\n            strokeWidth={strokeWidth}\n            fill={circleBgColor}\n          />\n        </g>\n      </svg>\n      <div className=\"textContent\">{children}</div>\n    </div>\n  );\n};\n\nSvgCircle.defaultProps = {\n  done: 0,\n  max: 24,\n  radius: 240,\n  stroke: \"#00A7FF\",\n  strokeWidth: 20,\n};\n\nexport default SvgCircle;\n","import \"./style.scss\";\n\nconst Button = ({ label, handleClick, param, className, children }) => {\n  return (\n    <button\n        type=\"button\"\n        className={className}\n        onClick={() => handleClick(param)}\n    >\n        {children}{label}\n    </button>\n  )\n};\n\nexport default Button;\n","export const ADD_DRAWING_LIST = \"ADD_DRAWING_LIST\";\nexport const GENERATE_NAME_LISTS = \"GENERATE_NAME_LISTS\";\nexport const DELETE_DRAWING_LIST = \"DELETE_DRAWING_LIST\";\nexport const DELETE_ALL_DRAWING_LISTS = \"DELETE_ALL_DRAWING_LISTS\";\nexport const NOTIFY_MESSAGE = \"NOTIFY_MESSAGE\";\nexport const CHANGE_STEP = \"CHANGE_STEP\";\n","import {\n  ADD_DRAWING_LIST,\n  GENERATE_NAME_LISTS,\n  DELETE_DRAWING_LIST,\n  DELETE_ALL_DRAWING_LISTS,\n  NOTIFY_MESSAGE,\n  CHANGE_STEP\n} from \"./actionTypes\";\n\nexport const addDrawingList = (name) => {\n  return {\n    type: ADD_DRAWING_LIST,\n    payload: { name },\n  };\n};\n\nexport const generateNameLists = (nameLists) => {\n  return {\n    type: GENERATE_NAME_LISTS,\n    payload: { nameLists },\n  };\n};\n\nexport const deleteDrawingList = (lists) => {\n  return {\n    type: DELETE_DRAWING_LIST,\n    payload: { lists },\n  };\n};\n\nexport const deleteAllDrawingLists = () => {\n  return {\n    type: DELETE_ALL_DRAWING_LISTS,\n  };\n};\n\nexport const notifyMessage = (notify) => {\n  return {\n    type: NOTIFY_MESSAGE,\n    payload: { notify },\n  };\n};\n\nexport const changeStep = (step) => {\n  return {\n    type: CHANGE_STEP,\n    payload: { step },\n  };\n};\n","import \"./style.scss\";\nimport SvgCircle from \"../SvgCircle\";\nimport Button from '../common/Button'\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { notifyMessage } from \"../../store/actions\";\n\nconst CountDown = ({ handleSelectMode }) => {\n  const [countDownType, setCountDownType] = useState(\"set\");\n  const [counter, setCounter] = useState(0);\n  const [counterMax, setMax] = useState(0);\n  const [minTen, setMinTen] = useState(0);\n  const [min, setMin] = useState(0);\n  const [secTen, setSecTen] = useState(0);\n  const [sec, setSec] = useState(0);\n  const dispatch = useDispatch();\n  let minTenInput = null;\n  let minInput = null;\n  let secTenInput = null;\n  let secInput = null;\n\n  useEffect(() => {\n    const timer =\n      countDownType === \"start\" &&\n      counter >= 0 &&\n      setInterval(() => {\n        if (counter > 0) {\n          setCounter(counter - 1);\n          const sec = 1, secTen = sec * 10, min = sec * 60, minTen = sec * 60 * 10\n          setMinTen(Math.floor(counter / minTen))\n          setMin(Math.floor(counter % minTen / min))\n          setSecTen(Math.floor(counter % min / secTen))\n          setSec(Math.floor(counter % secTen))\n        } else if (counter === 0) {\n          handleSelectMode(\"drawing\");\n        }\n      }, 1000);\n    return () => clearInterval(timer);\n  }, [counter, countDownType, handleSelectMode]);\n\n  useEffect(() => {\n    if (countDownType === \"set\") {\n      setMax(0);\n    } else if (countDownType === \"start\") {\n      if (counterMax === 0) {\n        setMax(counter);\n      }\n    }\n  }, [counter, countDownType, counterMax]);\n\n  const handleInputTime = (e, timeType) => {\n    const target = e.target.value;\n    let newCounter = parseInt(target);\n    if (newCounter >= 10) {\n      newCounter = Math.floor(newCounter / 10)\n    }\n    if (timeType === 'minTen') {\n      if (!isNaN(newCounter)) {\n        setMinTen(newCounter);\n        minInput.focus()\n      }\n    } else if (timeType === 'min') {\n      if (!isNaN(newCounter)) {\n        setMin(newCounter);\n        secTenInput.focus()\n      }\n    } else if (timeType === 'secTen') {\n      if (!isNaN(newCounter)) {\n        if (newCounter > 6) newCounter = 5\n        setSecTen(newCounter);\n        secInput.focus()\n      }\n    } else {\n      if (!isNaN(newCounter)) {\n        if (secTen === 6) newCounter = 0\n        setSec(newCounter);\n      }\n    }\n  }\n\n  const deleteInputTime = (timeType) => {\n    if (timeType === 'minTen') {\n      setMinTen(0);\n    } else if (timeType === 'min') {\n      minTenInput.focus()\n      setMin(0);\n    } else if (timeType === 'secTen') {\n      minInput.focus()\n      setSecTen(0);\n    } else if (timeType === 'sec') {\n      secTenInput.focus()\n      setSec(0);\n    }\n  }\n\n  const handleInputEnter = (e, countDownType, timeType) => {\n    if (e.key === \"Enter\") {\n      handleCountDownType(countDownType);\n    } else if (e.key === 'Backspace') {\n      deleteInputTime(timeType)\n    } else if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n      timeInputFieldMove(timeType, e.key)\n    }\n  };\n\n\n  const handleCountDownType = (type) => {\n    if (type !== countDownType) {\n      if (type === \"start\") {\n        const newCounter = minTen * 10 * 60 + min * 60 + secTen * 10 + sec\n        if (!isNaN(newCounter)) {\n          setCounter(newCounter);\n          if (newCounter && newCounter !== 0) {\n            setCountDownType(type);\n          } else {\n            const notifyObj = {\n              msg: \"Please input timer\",\n              type: \"error\",\n            };\n            dispatch(notifyMessage(notifyObj));\n          }\n        }\n      } else if (type === \"stop\") {\n        if (counter && counter !== 0) {\n          setCountDownType(type);\n        } else {\n          const notifyObj = {\n            msg: \"Please input timer\",\n            type: \"error\",\n          };\n          dispatch(notifyMessage(notifyObj));\n        }\n      } else {\n        setCountDownType(type);\n      }\n      if (type === \"set\") {\n        setCounter(0);\n        setMinTen(0);\n        setMin(0);\n        setSecTen(0);\n        setSec(0);\n      }\n    }\n  };\n\n  const timeInputFieldMove = (timeType, key) => {\n    if (timeType === 'minTen' && key === 'ArrowRight') {\n      minInput.focus()\n    } else if (timeType === 'min' && key === 'ArrowRight') {\n      secTenInput.focus()\n    } else if (timeType === 'min' && key === 'ArrowLeft') {\n      minTenInput.focus()\n    } else if (timeType === 'secTen' && key === 'ArrowRight') {\n      secInput.focus()\n    } else if (timeType === 'secTen' && key === 'ArrowLeft') {\n      minInput.focus()\n    } else if (timeType === 'sec' && key === 'ArrowLeft') {\n      secTenInput.focus()\n    }\n  }\n\n  return (\n    <div className=\"countDown row h-100\">\n      {\n        countDownType === \"set\" ? (\n          <div className=\"countDown-circle flex-center\">\n            <SvgCircle circleBgColor={'#00A7FF'}>\n              <div>\n                <div className=\"flex-center no-wrap mb-2\">\n                  <input\n                    className=\"countDown-circle-input\"\n                    maxLength=\"2\"\n                    type=\"text\"\n                    ref={(input) => { minTenInput = input; }}\n                    value={minTen}\n                    onChange={e => handleInputTime(e,'minTen')}\n                    onKeyDown={(e) => handleInputEnter(e, \"start\", 'minTen')}\n                  />\n                  <input\n                    className=\"countDown-circle-input\"\n                    maxLength=\"2\"\n                    type=\"text\"\n                    ref={(input) => { minInput = input; }}\n                    value={min}\n                    onChange={e => handleInputTime(e,'min')}\n                    onKeyDown={(e) => handleInputEnter(e, \"start\", 'min')}\n                  />\n                  <span>:</span>\n                  <input\n                    className=\"countDown-circle-input\"\n                    maxLength=\"2\"\n                    type=\"text\"\n                    ref={(input) => { secTenInput = input; }}\n                    value={secTen}\n                    onChange={e => handleInputTime(e,'secTen')}\n                    onKeyDown={(e) => handleInputEnter(e, \"start\", 'secTen')}\n                  />\n                  <input\n                    className=\"countDown-circle-input\"\n                    maxLength=\"2\"\n                    type=\"text\"\n                    ref={(input) => { secInput = input; }}\n                    value={sec}\n                    onChange={e => handleInputTime(e,'sec')}\n                    onKeyDown={(e) => handleInputEnter(e, \"start\", 'sec')}\n                  />\n                </div>\n                <div className=\"d-flex justify-content-between\">\n                  <Button className={'btn countDown-circle-btn'} param={\"start\"} handleClick={handleCountDownType}>\n                    <i className=\"far fa-play-circle\"></i>\n                  </Button>\n                  <Button className={'btn countDown-circle-btn'} param={\"stop\"} handleClick={handleCountDownType}>\n                    <i className=\"far fa-pause-circle\"></i>\n                  </Button>\n                  <Button className={'btn countDown-circle-btn'} param={\"set\"} handleClick={handleCountDownType}>\n                    <i className=\"fas fa-power-off\"></i>\n                  </Button>\n                </div>\n              </div>\n              \n            </SvgCircle>\n          </div>\n        ) : (\n          <div className=\"countDown-circle flex-center\">\n            <SvgCircle className={'svgAnimation'} max={counterMax} done={counter} circleBgColor={'#FFFFFF'} >\n              <div className=\"flex-center no-wrap countDown-circle-clock mb-2\">\n                {minTen}{min}:{secTen}{sec}\n              </div>\n              <div className=\"d-flex justify-content-between\">\n                <Button className={'btn countDown-circle-btn--start'} param={\"start\"} handleClick={handleCountDownType}>\n                  <i className=\"far fa-play-circle\"></i>\n                </Button>\n                <Button className={'btn countDown-circle-btn--start'} param={\"stop\"} handleClick={handleCountDownType}>\n                  <i className=\"far fa-pause-circle\"></i>\n                </Button>\n                <Button className={'btn countDown-circle-btn--start'} param={\"set\"} handleClick={handleCountDownType}>\n                  <i className=\"fas fa-power-off\"></i>\n                </Button>\n              </div>\n            </SvgCircle>\n          </div>\n        )\n      }\n      <div className=\"countDown-bg--right col-lg-7 col-6 h-100 ps-5\">\n        <Button label={'Back'} className={'btn btn--desktop px-2 py-1'} param={\"init\"} handleClick={handleSelectMode}>\n          <i className=\"fas fa-arrow-left me-2\"></i>\n        </Button>\n        <Button label={'Back'} className={'btn btn--mobile px-2 py-1'} param={\"selectMode\"} handleClick={handleSelectMode}>\n          <i className=\"fas fa-arrow-left me-2\"></i>\n        </Button>\n      </div>\n      <div className=\"countDown-bg--left col-lg-5 col-6 h-100\"></div>\n    </div>\n  );\n};\n\nexport default CountDown;\n","export const selectDrawingLists = (state) => state.drawingLists.drawingLists;\nexport const selectNotifyMsg = (state) => state.notifyMsg;\nexport const selectStep = (state) => state.step;\n","import \"./style.scss\";\nimport Button from '../common/Button'\nimport { useSelector } from \"react-redux\";\nimport { selectDrawingLists } from \"../../store/selectors\";\n\nconst Winner = ({ handleSelectMode }) => {\n  const drawingLists = useSelector(selectDrawingLists);\n\n  return (\n    <div className=\"winner h-100\">\n      <div className=\"winner-content flex-center mb-4 text-white\">\n        {drawingLists.length > 0 ? (\n          <div className=\"winner-content-tip\">\n            Congratulation for the drawing game winner!!\n            <br />\n            <div className=\"winner-content-tip-text flex-center\">\n              {\n                drawingLists[Math.floor(Math.random() * drawingLists.length)]\n                  .name\n              }\n            </div>\n          </div>\n        ) : (\n          \"There's no drawing lists, please add one at least.\"\n        )}\n      </div>\n      <div className=\"flex-center\">\n        <Button label={'Play again~!'} className={'winner-btn btn text-white fs-5'} param={'init'} handleClick={handleSelectMode}>\n          <i className=\"fas fa-redo-alt text-white me-2\"></i>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Winner;\n","import \"./style.scss\";\nimport CountDown from \"../CountDown\";\nimport Winner from \"../Winner\";\nimport Button from '../common/Button'\nimport { selectDrawingLists, selectStep } from \"../../store/selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { notifyMessage, changeStep } from \"../../store/actions\";\n\nconst DrawingView = ({ className }) => {\n  const drawingLists = useSelector(selectDrawingLists);\n  const step = useSelector(selectStep);\n  const dispatch = useDispatch();\n\n  const handleSelectMode = (type) => {\n    if (type !== step) {\n      if (\n        (type === \"drawing\" || type === \"countDown\") &&\n        drawingLists.length === 0\n      ) {\n        const notifyObj = {\n          msg: \"There's no drawing lists, please add one at least.\",\n          type: \"error\",\n        };\n        dispatch(notifyMessage(notifyObj));\n      } else {\n        dispatch(changeStep(type));\n      }\n    }\n  };\n\n  return (\n    <div id=\"targetId\" className={`${className} ${step !== 'init' ? 'p-0' : ''} drawingView h-100`}>\n      {step === \"init\" ? (\n        <div className=\"drawingView-panel ps-3 h-100\">\n          {step === \"init\" ? (\n            <div>\n              <div className=\"mb-3 d-flex align-items-center\">\n                <Button label={'Start without set countdown'} className={'btn text-white p-0'} param={'drawing'} handleClick={handleSelectMode}>\n                  <i className=\"fas fa-dice-d6 text-white me-2\"></i>\n                </Button>\n              </div>\n              <div className=\"mb-4 d-flex align-items-center\">\n                <Button label={'Start set countdown'} className={'btn text-white p-0'} param={'countDown'} handleClick={handleSelectMode}>\n                  <i className=\"far fa-clock text-white me-2\"></i>\n                </Button>\n              </div>\n              <h4 className=\"tipTitle text-white\">\n                Please add drawinglists before you start this game~~!!\n              </h4>\n            </div>\n          ) : (\n            step === \"countDown\" && (\n              <CountDown handleSelectMode={handleSelectMode} />\n            )\n          )}\n        </div>\n      ) : step === \"countDown\" ? (\n        <div className=\"drawingView-panel h-100\">\n          <CountDown handleSelectMode={handleSelectMode} />\n        </div>\n      ) : step === \"selectMode\" ? (\n        <div className=\"flex-center h-100\">\n          <div className=\"text-center p-2\">\n            <Button label={'Start without set countdown'} className={'btn text-white mb-4 fs-5'} param={'drawing'} handleClick={handleSelectMode}>\n              <i className=\"fas fa-dice-d6 text-white me-2\"></i>\n            </Button>\n            <br/>\n            <Button label={'Start set countdown'} className={'btn text-white fs-5'} param={'countDown'} handleClick={handleSelectMode}>\n              <i className=\"far fa-clock text-white me-2\"></i>\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <Winner handleSelectMode={handleSelectMode} />\n      )}\n    </div>\n  );\n};\n\nexport default DrawingView;\n","import \"./style.scss\";\nimport nameData from \"../../data/name.json\";\nimport Button from '../common/Button'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectDrawingLists } from \"../../store/selectors\";\nimport {\n  addDrawingList,\n  generateNameLists,\n  deleteDrawingList,\n  deleteAllDrawingLists,\n  notifyMessage,\n  changeStep\n} from \"../../store/actions\";\nimport { useState } from \"react\";\n\nconst DrawingList = ({ className }) => {\n  const drawingLists = useSelector(selectDrawingLists);\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [deleteDrawingLists, setDeleteDrawingLists] = useState([]);\n  const [toggleLists, setToggleLists] = useState(false);\n\n  const handleInputChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleInputEnter = (e) => {\n    if (e.key === \"Enter\") {\n      setName(e.target.value);\n      handleAddList();\n    }\n  };\n\n  const handleCheckBoxChange = (e, id) => {\n    if (e.target.checked) {\n      const deleteLists = [...deleteDrawingLists, id];\n      setDeleteDrawingLists(deleteLists);\n    }\n  };\n\n  const handleAddList = () => {\n    const duplicateName = drawingLists.some((item) => {\n      return item.name === name;\n    });\n    if (!duplicateName && name !== \"\") {\n      dispatch(addDrawingList(name));\n      setName(\"\");\n    } else if (duplicateName) {\n      const notifyObj = {\n        msg: \"Duplicate Name\",\n        type: \"error\",\n      };\n      dispatch(notifyMessage(notifyObj));\n    } else if (name === \"\") {\n      const notifyObj = {\n        msg: \"Should add a name\",\n        type: \"error\",\n      };\n      dispatch(notifyMessage(notifyObj));\n    }\n  };\n\n  const handleDeleteList = () => {\n    dispatch(deleteDrawingList(deleteDrawingLists));\n  };\n\n  const handleDeleteAllLists = () => {\n    dispatch(deleteAllDrawingLists());\n  };\n\n  const handleGengerateNameList = () => {\n    const newDrawingLists = [...Array(20)].map(() => randGenerateName());\n    dispatch(generateNameLists(newDrawingLists));\n  };\n\n  const randGenerateName = () => {\n    const numNameParts = Math.floor(Math.random() * 4) + 1;\n    let randName =\n      nameData.firstNameParts[\n        Math.floor(Math.random() * nameData.firstNameParts.length)\n      ];\n    [...Array(numNameParts)].forEach((name) => {\n      let newNamePart = \"\";\n      if (/[^aeiou]/.test(randName[randName.length - 1])) {\n        newNamePart =\n          nameData.otherNamePartsNonVowel[\n            Math.floor(Math.random() * nameData.otherNamePartsNonVowel.length)\n          ];\n      } else {\n        newNamePart =\n          nameData.otherNamePartsVowel[\n            Math.floor(Math.random() * nameData.otherNamePartsVowel.length)\n          ];\n      }\n      randName += newNamePart;\n    });\n    return randName;\n  };\n\n  const handleToggleLists = () => {\n    setToggleLists(!toggleLists);\n  };\n\n  const handleNextToCountDown = () => {\n    if (drawingLists.length === 0) {\n      const notifyObj = {\n        msg: \"Add one list at least!\",\n        type: \"error\",\n      };\n      dispatch(notifyMessage(notifyObj));\n    } else {\n      dispatch(changeStep('selectMode'));\n    }\n  }\n\n  return (\n    <div className={`${className} drawingList`}>\n      <div className=\"mb-1 d-flex align-items-center\">\n        <Button label={'Generate new lists'} className={'btn text-white'} handleClick={handleGengerateNameList}>\n          <i className=\"fas fa-plus text-white me-2\"></i>\n        </Button>\n      </div>\n      <div className=\"mb-1\">\n        <Button label={'Delete selected list'} className={'btn text-white'} handleClick={handleDeleteList}>\n          <i className=\"far fa-trash-alt text-white me-2\"></i>\n        </Button>\n      </div>\n      <div className=\"mb-1\">\n        <Button label={'Delete all drawing list'} className={'btn text-white'} handleClick={handleDeleteAllLists}>\n          <i className=\"far fa-trash-alt text-white me-2\"></i>\n        </Button>\n      </div>\n      <div className=\"drawingList-input-group input-group-sm d-flex\">\n        <input\n          type=\"text\"\n          className=\"w-50 form-control\"\n          value={name}\n          onChange={(e) => handleInputChange(e)}\n          onKeyDown={(e) => handleInputEnter(e)}\n          placeholder=\"Add list\"\n          aria-label=\"Recipient's username\"\n          aria-describedby=\"button-addon2\"\n        />\n        <Button className={'btn btn-sm bg-white'} handleClick={handleAddList}>\n          <i className=\"drawingList-input-icon fas fa-plus\"></i>\n        </Button>\n      </div>\n      <div\n        className=\"drawingList-lists list-group\"\n      >\n        <h4 className={`drawingList-lists-header text-white ${drawingLists.length > 0 ? 'drawingList-lists-header--expand' : ''}`}>\n          Drawing lists\n        </h4>\n        {\n          drawingLists.length > 0 &&\n          <div\n            className=\"drawingList-lists-toggle\"\n            onClick={() => handleToggleLists()}\n          >\n            Toggle lists\n          </div>\n        }\n        <div className={`drawingList-lists-content ${\n          toggleLists ? \"drawingList-lists-content-hide\" : \"\"\n        }`}>\n          {drawingLists.length > 0 ? (\n            drawingLists.map((list) => (\n              <label className=\"list-group-item rounded-0 text-white\" key={list.id}>\n                <input className=\"form-check-input me-1\" type=\"radio\" onChange={(e) => handleCheckBoxChange(e, list.id)} />\n                {list.name}\n              </label>\n            ))\n          ) : (\n            <div className=\"text-white p-2\">\n              There's no drawing lists, please add one at least.\n            </div>\n          )}\n        </div>\n      </div>\n      <Button label={'Next'} className={'drawingList-btn btn text-white'} handleClick={handleNextToCountDown} />\n    </div>\n  );\n};\n\nexport default DrawingList;\n","import \"./style.scss\";\nimport DrawingView from \"../DrawingView\";\nimport DrawingList from \"../DrawingList\";\nimport { selectStep } from \"../../store/selectors\";\nimport { useSelector } from \"react-redux\";\n\n\nconst Content = () => {\n  const step = useSelector(selectStep);\n  return (\n    <div className=\"cardContent row h-100\">\n        {\n            step === 'init' ? (\n              <>\n                <DrawingView className={\"DrawingView-mobile col-12 col-lg-6\"} />\n                <DrawingList className={\"DrawingList-mobile col-lg-6\"} />\n              </>\n            ) :<DrawingView className={\"col-12\"} />\n        }      \n        \n    </div>\n  );\n};\n\nexport default Content;\n","import \"./style.scss\";\nimport { selectNotifyMsg } from \"../../../store/selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { notifyMessage } from \"../../../store/actions\";\nimport { useEffect } from \"react\";\n\nconst Notify = () => {\n  const notifyMsg = useSelector(selectNotifyMsg);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const closeNotify = setTimeout(() => {\n      const notifyObj = {\n        msg: \"\",\n        type: \"\",\n      };\n      dispatch(notifyMessage(notifyObj));\n    }, 3000);\n    return () => {\n      clearTimeout(closeNotify);\n    };\n  }, [dispatch, notifyMsg]);\n\n  return (\n    <div\n      className={`notify text-white fs-6 border-m ${\n        notifyMsg.type === \"error\" ? \"bg-danger\" : \"bg-success\"\n      } ${notifyMsg.msg !== \"\" ? \"notify-show notify-slide\" : \"\"}`}\n    >\n      {notifyMsg.msg}\n    </div>\n  );\n};\n\nexport default Notify;\n","import \"./App.scss\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Notify from \"./components/common/Notify\";\n\nconst App = () => {\n  return (\n    <div className=\"wrap\">\n      <div className=\"content col-12 border-s\">\n        <Header />\n        <Content />\n      </div>\n      <Notify />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  ADD_DRAWING_LIST,\n  GENERATE_NAME_LISTS,\n  DELETE_DRAWING_LIST,\n  DELETE_ALL_DRAWING_LISTS,\n} from \"../actionTypes\";\n\nconst initialState = {\n  drawingLists: [],\n};\n\nlet listId = 0;\n\nexport default function drawingListsReducer(state = initialState, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ADD_DRAWING_LIST: {\n      return {\n        ...state,\n        drawingLists: [\n          {\n            id: listId++,\n            name: payload.name,\n          },\n          ...state.drawingLists,\n        ],\n      };\n    }\n    case GENERATE_NAME_LISTS: {\n      return {\n        drawingLists: payload.nameLists.map((list) => {\n          return {\n            id: listId++,\n            name: list,\n          };\n        }),\n      };\n    }\n    case DELETE_DRAWING_LIST: {\n      return {\n        ...state,\n        drawingLists: state.drawingLists.filter(\n          (list) => payload.lists.indexOf(list.id) === -1\n        ),\n      };\n    }\n    case DELETE_ALL_DRAWING_LISTS: {\n      return {\n        ...state,\n        drawingLists: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { NOTIFY_MESSAGE } from \"../actionTypes\";\n\nconst initialState = {\n  msg: \"\",\n  type: \"\",\n};\n\nexport default function notifyMsgReducer(state = initialState, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case NOTIFY_MESSAGE: {\n      return {\n        msg: payload.notify.msg,\n        type: payload.notify.type,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { CHANGE_STEP }  from '../actionTypes';\n\nconst initialState = 'init';\n\nexport default function notifyMsgReducer (state = initialState, action) {\n    const payload = action.payload;\n    switch (action.type) {\n        case CHANGE_STEP: {\n            return payload.step\n        }\n        default: {\n            return state;\n        }\n    }\n}","import { combineReducers } from \"redux\";\nimport drawingLists from \"./drawingLists\";\nimport notifyMsg from \"./notifyMsg\";\nimport step from \"./step\";\n\nexport default combineReducers({\n  drawingLists,\n  notifyMsg,\n  step\n});\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport \"./styles/common.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}