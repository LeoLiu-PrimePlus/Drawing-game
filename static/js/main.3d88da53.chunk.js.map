{"version":3,"sources":["components/CardHeader/index.js","components/SvgCircle/index.js","store/actionTypes.js","store/actions.js","components/CountDown/index.js","store/selectors.js","components/Winner/index.js","components/DrawingView/index.js","components/DrawingList/index.js","components/CardContent/index.js","components/common/ScrollButton/index.js","components/common/Notify/index.js","App.js","reportWebVitals.js","store/reducers/drawingLists.js","store/reducers/notifyMsg.js","store/reducers/index.js","store/store.js","index.js"],"names":["CardHeader","className","SvgCircle","done","max","radius","stroke","strokeWidth","children","size","length","Math","ceil","PI","remainingLength","width","height","viewBox","xmlns","r","cx","cy","strokeDasharray","strokeDashoffset","strokeLinecap","fill","defaultProps","ADD_DRAWING_LIST","GENERATE_NAME_LISTS","DELETE_DRAWING_LIST","DELETE_ALL_DRAWING_LISTS","NOTIFY_MESSAGE","notifyMessage","notify","type","payload","CountDown","handleSelectMode","useState","countDownType","setCountDownType","counter","setCounter","counterMax","setMax","dispatch","useDispatch","useEffect","timer","setInterval","clearInterval","handleCountDownType","msg","maxLength","value","onChange","e","target","newCounter","parseInt","isNaN","onKeyDown","key","handleInputEnter","onClick","selectDrawingLists","state","drawingLists","selectNotifyMsg","notifyMsg","Winner","useSelector","floor","random","name","DrawingView","step","setStep","id","DrawingList","setName","deleteDrawingLists","setDeleteDrawingLists","toggleLists","setToggleLists","handleAddList","duplicateName","some","item","addDrawingList","handleDeleteList","lists","handleDeleteAllLists","handleGengerateNameList","newDrawingLists","Array","map","randGenerateName","nameLists","numNameParts","randName","nameData","firstNameParts","forEach","newNamePart","test","otherNamePartsNonVowel","otherNamePartsVowel","handleInputChange","placeholder","aria-label","aria-describedby","list","checked","deleteLists","handleCheckBoxChange","CardContent","ScrollButton","processScroll","dimenY","__processScroll","distanceLeft","distanceCovered","stepSize","setTimeout","window","scrollTo","data-target-id","targetId","dataset","scrollDistance","document","getElementById","getBoundingClientRect","top","Notify","closeNotify","clearTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","listId","combineReducers","action","filter","indexOf","createStore","rootReducer","ReactDOM","render","store"],"mappings":"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","file":"static/js/main.3d88da53.chunk.js","sourcesContent":["import './style.scss'\n\nconst CardHeader = () => {\n    return (\n        <div className=\"cardHeader flex-center text-white bg-primary\">Lucky Draw</div>\n    );\n}\n\n\nexport default CardHeader;","import './style.scss'\n\nconst SvgCircle = ({ className, done, max, radius, stroke, strokeWidth, children }) => {\n    const size = (radius + strokeWidth) * 2\n    const length = Math.ceil(2 * radius * Math.PI)\n    let remainingLength = 0\n    if (max !== 0) {\n        remainingLength = length - (Math.ceil(2 * radius * Math.PI) * (done / max))\n    }\n    \n    return (\n        <div className=\"svgContainer\">\n            <svg \n                className={className}\n                width={size}\n                height={size}\n                viewBox={`0 0 ${size} ${size}`}\n                xmlns=\"http://www.w3.org/2000/svg\"\n            >\n                <g>\n                    <circle \n                        className=\"circle\"\n                        r={radius}\n                        cx={radius + strokeWidth} \n                        cy={radius + strokeWidth} \n                        stroke={stroke}\n                        strokeDasharray={length}\n                        strokeDashoffset={remainingLength}\n                        strokeLinecap=\"round\"\n                        strokeWidth={strokeWidth}\n                        fill=\"none\" \n                    />\n                    <circle \n                        className=\"circle--bg\"\n                        r={radius} \n                        cx={radius + strokeWidth}\n                        cy={radius + strokeWidth} \n                        stroke=\"rgba(0, 0, 0, .1)\"\n                        strokeLinecap=\"round\"\n                        strokeWidth={strokeWidth} \n                        fill=\"none\" \n                    />\n                </g>\n            </svg>\n            <div className=\"textContent fs-1\">{children}</div>\n        </div>\n    );\n}\n\nSvgCircle.defaultProps = {\n    done: 0,\n    max: 24,\n    radius: 100,\n    stroke: '#ff4759',\n    strokeWidth: 8,\n  }\n\nexport default SvgCircle;","export const ADD_DRAWING_LIST = 'ADD_DRAWING_LIST';\nexport const GENERATE_NAME_LISTS = 'GENERATE_NAME_LISTS';\nexport const DELETE_DRAWING_LIST = 'DELETE_DRAWING_LIST';\nexport const DELETE_ALL_DRAWING_LISTS = 'DELETE_ALL_DRAWING_LISTS';\nexport const NOTIFY_MESSAGE = 'NOTIFY_MESSAGE';","import {\n    ADD_DRAWING_LIST,\n    GENERATE_NAME_LISTS,\n    DELETE_DRAWING_LIST,\n    DELETE_ALL_DRAWING_LISTS,\n    NOTIFY_MESSAGE\n} from './actionTypes';\n\nexport const addDrawingList = (name) => {\n    return {\n        type: ADD_DRAWING_LIST,\n        payload: { name }\n    }\n}\n\nexport const generateNameLists = (nameLists) => {\n    return {\n        type: GENERATE_NAME_LISTS,\n        payload: { nameLists  }\n    }\n}\n\nexport const deleteDrawingList = (lists) => {\n    return {\n        type: DELETE_DRAWING_LIST,\n        payload: { lists }\n    }\n}\n\nexport const deleteAllDrawingLists = () => {\n    return {\n        type: DELETE_ALL_DRAWING_LISTS\n    }\n}\n\nexport const notifyMessage = (notify) => {\n    return {\n        type: NOTIFY_MESSAGE,\n        payload: { notify }\n    }\n}\n","import './style.scss';\nimport { useState, useEffect } from 'react';\nimport SvgCircle from '../SvgCircle';\nimport { useDispatch } from 'react-redux';\nimport { notifyMessage } from '../../store/actions';\n\nconst CountDown = ({handleSelectMode}) => {\n    const [countDownType, setCountDownType] = useState('set')\n    const [counter, setCounter] = useState(0);\n    const [counterMax, setMax] = useState(0);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const timer = countDownType === 'start' && counter >= 0 && setInterval(() => {\n            if (counter > 0) {\n                setCounter(counter - 1);\n            } else if (counter === 0) {\n                handleSelectMode('drawing');\n            }\n        }, 1000);\n        return () => clearInterval(timer);\n    }, [counter, countDownType, handleSelectMode]);\n\n    useEffect(() => {\n        if (countDownType === 'set') {\n            setMax(0)\n        } else if (countDownType === 'start') {\n            if (counterMax === 0) {\n                setMax(counter)\n            }\n        }\n    }, [counter, countDownType, counterMax])\n\n    const handleInputCounter = (e) => {\n        const target = e.target.value;\n        const newCounter = parseInt(target);\n        if (!isNaN(newCounter)) setCounter(newCounter);\n    }\n    \n    const handleCountDownType = (type) => {\n        if (type !== countDownType) {\n            if (type === 'start') {\n                if (counter && counter !== 0) {\n                    setCountDownType(type)\n                } else {\n                    const notifyObj = {\n                        msg: 'Please input timer',\n                        type: 'error'\n                    }\n                    dispatch(notifyMessage(notifyObj));\n                }\n            } else if (type === 'stop') {\n                if (counter && counter !== 0) {\n\n                } else {\n                    const notifyObj = {\n                        msg: 'Please input timer',\n                        type: 'error'\n                    }\n                    dispatch(notifyMessage(notifyObj));\n                }\n            } else {\n                setCountDownType(type);\n            }\n            if (type === 'set') setCounter(0)\n        };\n    }\n\n    const handleInputEnter = (type, e) => {\n        if (e.key === 'Enter') handleCountDownType(type);\n    }\n\n    return (\n        <div className=\"countDown flex-center\">\n            <div className=\"countDown-panel\">\n                {\n                    countDownType === 'set' ? (\n                        <div className=\"countDown-panel-clock mb-3\">\n                            <SvgCircle>\n                                <input className=\"countDown-panel-input\" maxLength=\"3\" type=\"text\" value={counter} onChange={handleInputCounter} onKeyDown={e => handleInputEnter('start', e)} />\n                            </SvgCircle>\n                        </div>\n                    ) : (\n                        <div className=\"countDown-panel-clock mb-3\">\n                            <SvgCircle max={counterMax} done={counter}>{counter}</SvgCircle>\n                        </div>\n                    )\n                }\n                <div className=\"d-flex justify-content-between mb-3\">\n                    <div>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('start')}>Start</button>\n                    </div>\n                    <div>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('stop')}>Stop</button>\n                    </div>\n                </div>\n                <div className=\"d-flex justify-content-between mb-3\">\n                    <div className=\"mb-2\">\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleCountDownType('set')}>Reset</button>\n                    </div>\n                    <div>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Back</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default CountDown;","export const selectDrawingLists = (state) => state.drawingLists.drawingLists;\nexport const selectNotifyMsg = (state) => state.notifyMsg;\n","import './style.scss';\nimport { useSelector } from 'react-redux';\nimport { selectDrawingLists } from '../../store/selectors';\n\nconst Winner = ({ handleSelectMode }) => {\n    const drawingLists = useSelector(selectDrawingLists);\n\n    return (\n        <div>\n            <div className=\"flex-center mb-4\">\n                {\n                    drawingLists.length > 0 ? (\n                        <div>\n                            Congratulation for the drawing game winner!!<br/>\n                            <div className=\"flex-center text-success fs-3\">\n                                {drawingLists[Math.floor(Math.random() * drawingLists.length)].name}\n                            </div>\n                        </div>\n                    )\n                    :\n                    \"There's no drawing lists, please add one at least.\"\n                }\n            </div>\n            <div className=\"flex-center\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('init')}>Play again~!</button>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Winner;","import './style.scss';\nimport { useState } from 'react';\nimport CountDown from '../CountDown';\n// import { SwitchTransition, CSSTransition } from \"react-transition-group\";\nimport Winner from '../Winner'\nimport { selectDrawingLists } from '../../store/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notifyMessage } from '../../store/actions';\n\nconst DrawingView = ({ className }) => {\n    const drawingLists = useSelector(selectDrawingLists);\n    const dispatch = useDispatch();\n    const [step, setStep] = useState('init');\n\n    const handleSelectMode = (type) => {\n        if (type !== step) {\n            if ((type === 'drawing' || type === 'countDown') && drawingLists.length === 0) {\n                const notifyObj = {\n                    msg: \"There's no drawing lists, please add one at least.\",\n                    type: \"error\"\n                }\n                dispatch(notifyMessage(notifyObj))\n            } else {\n                setStep(type)\n            }\n        }\n    }\n\n    return (\n        <div  id=\"targetId\" className={`${className} drawingView flex-center`}>\n                    {\n                        step === 'init' ? (\n                            <div className=\"drawingView-panel flex-center\">\n                                {\n                                    step === 'init' ? (\n                                        <div>\n                                            <div className=\"mb-4\">\n                                                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('drawing')}>Start without set countdown</button>\n                                            </div>\n                                            <div>\n                                                <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleSelectMode('countDown')}>Start set countdown</button>\n                                            </div>\n                                        </div>\n                                    ) :\n                                    step === 'countDown' && <CountDown handleSelectMode={handleSelectMode}  />\n                                }\n                            </div> \n                        ) : step === 'countDown' ? (\n                            <div className=\"drawingView-panel flex-center\">\n                                <CountDown handleSelectMode={handleSelectMode} />\n                            </div> \n                        ) : <Winner handleSelectMode={handleSelectMode} />\n                    }\n        </div>\n    );\n}\n\n\nexport default DrawingView;","import './style.scss';\nimport nameData from '../../data/name.json'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectDrawingLists } from '../../store/selectors';\nimport { addDrawingList, generateNameLists, deleteDrawingList, deleteAllDrawingLists, notifyMessage } from '../../store/actions';\nimport { useState } from 'react';\n\nconst DrawingList = ({ className }) => {\n    const drawingLists = useSelector(selectDrawingLists);\n    const dispatch = useDispatch();\n    const [name , setName] = useState('');\n    const [deleteDrawingLists, setDeleteDrawingLists] = useState([]);\n    const [toggleLists, setToggleLists] = useState(false);\n\n    const handleInputChange = (e) => {\n        setName(e.target.value);\n    }\n\n    const handleInputEnter = (e) => {\n        if (e.key === 'Enter') {\n            setName(e.target.value);\n            handleAddList();\n        }\n    }\n\n    const handleCheckBoxChange = (e, id) => {\n        if (e.target.checked) {\n            const deleteLists = [...deleteDrawingLists, id];\n            setDeleteDrawingLists(deleteLists);\n        }\n    }\n\n    const handleAddList = () => {\n        const duplicateName = drawingLists.some(item => {\n            return item.name === name\n        })\n        if (!duplicateName && name !== '') {\n            dispatch(addDrawingList(name));\n            setName('');\n        } else if (duplicateName) {\n            const notifyObj = {\n                msg: 'Duplicate Name',\n                type: 'error'\n            }\n            dispatch(notifyMessage(notifyObj));\n        } else if (name === '') {\n            const notifyObj = {\n                msg: 'Should add a name',\n                type: 'error'\n            }\n            dispatch(notifyMessage(notifyObj));\n        }\n    }\n\n    const handleDeleteList = () => {\n        dispatch(deleteDrawingList(deleteDrawingLists));\n    }\n\n    const handleDeleteAllLists = () => {\n        dispatch(deleteAllDrawingLists());\n    }\n\n    const handleGengerateNameList = () => {\n        const newDrawingLists = [...Array(20)].map(() => randGenerateName())\n        dispatch(generateNameLists(newDrawingLists))\n    }\n\n    const randGenerateName = () => {\n        const numNameParts = Math.floor(Math.random() * 4) + 1;\n        let randName = nameData.firstNameParts[Math.floor(Math.random() * nameData.firstNameParts.length)];\n        [...Array(numNameParts)].forEach(name => {\n            let newNamePart = '';\n            if (/[^aeiou]/.test(randName[randName.length - 1])) {\n                newNamePart = nameData.otherNamePartsNonVowel[Math.floor(Math.random() * nameData.otherNamePartsNonVowel.length)];\n            } else {\n                newNamePart = nameData.otherNamePartsVowel[Math.floor(Math.random() * nameData.otherNamePartsVowel.length)];\n            }\n            randName += newNamePart\n        })\n        return randName\n    }\n\n    const handleToggleLists =() => {\n        setToggleLists(!toggleLists)\n    }\n\n    return (\n        <div className={`${className} drawingList`}>\n            \n            <div className=\"mb-2\">\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleGengerateNameList()}>Generate new lists</button>\n            </div>\n            <div className=\"mb-2\">\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteList()}>Delete selected list</button>\n            </div>\n            <div className=\"mb-2\">\n                <button type=\"button\" className=\"btn btn-outline-secondary btn-sm\" onClick={() => handleDeleteAllLists()}>Delete all drawing list</button>\n            </div>\n            <div className=\"input-group-sm mb-3 d-flex\">\n                <input type=\"text\" className=\"w-50 form-control\" value={name} onChange={(e) => handleInputChange(e)} onKeyDown={e => handleInputEnter(e)} placeholder=\"Add list\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\"/>\n                <button className=\"btn btn-outline-secondary btn-sm\" type=\"button\" id=\"button-addon2\" onClick={() => handleAddList()}>Add list</button>\n            </div>\n            <div className={`drawingList-lists list-group border-m shadow ${toggleLists ? 'drawingList-lists-hide' : ''}`}>\n                <div className=\"drawingList-lists-toggle text-white\" onClick={() => handleToggleLists()}>Toggle lists</div>\n                {\n                    drawingLists.length > 0 ? (\n                        drawingLists.map(list => (\n                            <label className=\"list-group-item rounded-0\" key={list.id}>\n                                <input className=\"form-check-input me-1\" type=\"checkbox\" onChange={(e) => handleCheckBoxChange(e, list.id)} value=\"\" />\n                                { list.name }\n                            </label>\n                        ))\n                    ) : <div className=\"p-2\">There's no drawing lists, please add one at least.</div>\n                    \n                }\n            </div>\n        </div>\n    );\n}\n\n\nexport default DrawingList;","import './style.scss';\nimport DrawingView from '../DrawingView';\nimport DrawingList from '../DrawingList';\n\nconst CardContent = () => {\n\n    return (\n        <div className=\"cardContent bg-white row\">\n            <DrawingList className={'col-lg-4'} />\n            <DrawingView className={'col-12 col-lg-8'} />\n        </div>\n    );\n}\n\n\nexport default CardContent;","import './style.scss';\n\n\nconst ScrollButton = () => {\n    const handleScroll = (e) => {\n        const targetId = e.target.dataset.targetId;\n        if(targetId) {\n          const targetElement = document.getElementById(targetId);\n          const scrollDistance = targetElement.getBoundingClientRect().top;\n          processScroll(scrollDistance);\n        }\n      }\n      \n      const processScroll = (dimenY) => {\n        __processScroll(dimenY, 0, 1);\n      }\n\n      const __processScroll = (distanceLeft, distanceCovered, stepSize) => {\n        setTimeout(() => {\n          if(distanceLeft > distanceCovered) {\n            stepSize = 1.1*stepSize;\n          } else {\n            stepSize = Math.ceil(0.91*stepSize);\n          }\n          window.scrollTo(0, distanceCovered);\n          if(distanceLeft > 0) {\n            __processScroll(distanceLeft - stepSize, distanceCovered + stepSize, stepSize);\n          }\n        }, 10);\n      }\n\n    return (\n        <div className=\"scrollButton bg-primary text-white fs-6\" data-target-id=\"targetId\" onClick={handleScroll}>\n            bottom\n        </div>\n    );\n}\n\n\nexport default ScrollButton;","import './style.scss'\nimport { selectNotifyMsg } from '../../../store/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { notifyMessage } from '../../../store/actions';\nimport { useEffect } from 'react';\n\nconst Notify = () => {\n    const notifyMsg = useSelector(selectNotifyMsg);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const closeNotify = setTimeout(() => {\n            const notifyObj = {\n                msg: '',\n                type: ''\n            }\n            dispatch(notifyMessage(notifyObj))\n        }, 3000)\n        return () => {\n            clearTimeout(closeNotify)\n        }\n    }, [dispatch, notifyMsg])\n    \n    return (\n        <div className={`notify text-white fs-6 border-m ${notifyMsg.type === 'error' ? 'bg-danger' : 'bg-success'} ${notifyMsg.msg !== '' ? 'notify-show notify-slide' : '' }`}>\n            {notifyMsg.msg}\n        </div>\n    );\n}\n\n\nexport default Notify;","import './App.scss';\nimport CardHeader from './components/CardHeader';\nimport CardContent from './components/CardContent';\nimport ScrollButton from './components/common/ScrollButton';\nimport Notify from './components/common/Notify';\n\n\nconst App = () => {\n  return (\n    <div className=\"main container\">\n      <div className=\"card col-12 border-l shadow p-0\">\n        <CardHeader />\n        <h4 className=\"tipTitle\">Please add drawinglists before you start this game</h4>\n        <CardContent />\n      </div>\n      <ScrollButton />\n      <Notify />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_DRAWING_LIST, GENERATE_NAME_LISTS, DELETE_DRAWING_LIST, DELETE_ALL_DRAWING_LISTS } from '../actionTypes';\n\nconst initialState = {\n    drawingLists: []\n}\n\nlet listId = 0\n\nexport default function drawingListsReducer (state = initialState, action) {\n    const payload = action.payload;\n    switch (action.type) {\n        case ADD_DRAWING_LIST: {\n            return {\n                ...state,\n                drawingLists: [\n                    {\n                        id: listId++,\n                        name: payload.name\n                    },\n                    ...state.drawingLists,\n                ]\n            };\n        }\n        case GENERATE_NAME_LISTS: {\n            return {\n                drawingLists: payload.nameLists.map(list => {\n                    return {\n                        id: listId++,\n                        name: list\n                    }\n                })\n            }\n        }\n        case DELETE_DRAWING_LIST: {\n            return {\n                ...state,\n                drawingLists: state.drawingLists.filter(list => payload.lists.indexOf(list.id) === -1)\n            };\n        }\n        case DELETE_ALL_DRAWING_LISTS: {\n            return {\n                ...state,\n                drawingLists: []\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}","import { NOTIFY_MESSAGE }  from '../actionTypes';\n\nconst initialState = {\n    msg: '',\n    type: ''\n};\n\nexport default function notifyMsgReducer (state = initialState, action) {\n    const payload = action.payload;\n    switch (action.type) {\n        case NOTIFY_MESSAGE: {\n            return {\n                msg: payload.notify.msg,\n                type: payload.notify.type\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}","import { combineReducers } from 'redux';\nimport drawingLists from './drawingLists';\nimport notifyMsg from './notifyMsg';\n\nexport default combineReducers({\n    drawingLists,\n    notifyMsg\n});","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './styles/common.scss'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}